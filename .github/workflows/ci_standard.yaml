name: Continuous Integration

on:
  push:
    branches:
      - main
      - develop
  schedule:
    - cron: '0 1 * * SUN'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_windows:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        BuildPlatform: [x64, x86]
        BuildConfiguration: [Release, Debug]

    env:
      OpenDdsVersion: "3.25"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup dotnet 6.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    # Downgrade due to: https://github.com/microsoft/vstest/issues/4549
    - name: Setup dotnet 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.401'

#    - name: Setup dotnet 6.0
#      shell: pwsh
#      run: |
#        Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
#        ./dotnet-install.ps1 -Architecture '${{ matrix.BuildPlatform }}' -Channel 6.0;
#        echo "PATH=$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
#
#    - name: Setup dotnet 7.0
#      shell: pwsh
#      run: |
#        Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
#        ./dotnet-install.ps1 -Architecture '${{ matrix.BuildPlatform }}' -Channel 7.0;
#        echo "PATH=$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Cache OpenDDS libraries
      id: opendds-libraries-windows
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/cmake/**/*
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.pl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.dll
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.lib
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.exe
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/dds/idl/IDLTemplate.txt
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.h
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.hpp
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.cpp
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.inl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.idl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.pidl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/VERSION.txt
        key: opendds-cache-${{ env.OpenDdsVersion }}-${{ matrix.BuildConfiguration }}-win-${{ matrix.BuildPlatform }}-ci

    - name: Build & Test with Cake (No cached)
      shell: pwsh
      if: steps.opendds-libraries-windows.outputs.cache-hit != 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False --VisualStudioVersion=VS2022
      working-directory: ${{ github.workspace }}/Build

    - name: Build & Test with Cake (Cached)
      shell: pwsh
      if: steps.opendds-libraries-windows.outputs.cache-hit == 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=True --IgnoreThirdPartyBuild=True --VisualStudioVersion=VS2022
      working-directory: ${{ github.workspace }}/Build

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: "Test Report: win-${{ matrix.BuildPlatform }} ${{ matrix.BuildConfiguration }}"
        path: TestResults/netcoreapp3.1/test-results.trx,TestResults/net5.0/test-results.trx,TestResults/net6.0/test-results.trx,TestResults/net7.0/test-results.trx,TestResults/net461/test-results.trx,TestResults/net462/test-results.trx,TestResults/net47/test-results.trx,TestResults/net471/test-results.trx,TestResults/net472/test-results.trx,TestResults/net48/test-results.trx
        reporter: dotnet-trx

    - name: Get path to lcov file
      id: get_lcov_path
      shell: bash
      run: printf 'lcov_path=%s\n' ./TestResults/net6.0/*/coverage.info >> $GITHUB_OUTPUT

    - name: Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        file: "${{ steps.get_lcov_path.outputs.lcov_path }}"
        format: lcov
        parallel: true
        flag-name: coverage-windows-${{ join(matrix.*, '-') }}

  build_linux:
    runs-on: ubuntu-latest

    env:
      OpenDdsVersion: "3.25"
      BuildPlatform: "x64"
      BuildConfiguration: "Release"
      LD_RPATH_FLAGS: "-Wl,-rpath='$ORIGIN'"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup dotnet 6.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    # Downgrade due to: https://github.com/microsoft/vstest/issues/4549
    - name: Setup dotnet 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.401'

    - name: Cache OpenDDS libraries
      id: opendds-libraries-linux
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/ext/OpenDDS_Linux/cmake/**/*
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.pl
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/lib*.so*
          ${{ github.workspace }}/ext/OpenDDS_Linux/bin/
          ${{ github.workspace }}/ext/OpenDDS_Linux/ACE_wrappers/bin/
          ${{ github.workspace }}/ext/OpenDDS_Linux/dds/idl/IDLTemplate.txt
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.h
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.hpp
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.cpp
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.inl
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.idl
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.pidl
          ${{ github.workspace }}/ext/OpenDDS_Linux/VERSION.txt
          ${{ github.workspace }}/ext/OpenDDS_Linux/tools/
          ${{ github.workspace }}/ext/OpenDDS_Linux/dds/InfoRepo/DCPSInfoRepo
          ${{ github.workspace }}/ext/OpenDDS_Linux/dds/idl/opendds_idl
          ${{ github.workspace }}/ext/OpenDDS_Linux/ACE_wrappers/apps/gperf/src/ace_gperf
          ${{ github.workspace }}/ext/OpenDDS_Linux/ACE_wrappers/TAO/TAO_IDL/tao_idl
        key: opendds-cache-${{ env.OpenDdsVersion }}-linux-${{ env.BuildPlatform }}-ci

    - name: Build Native (No cached)
      shell: pwsh
      if: steps.opendds-libraries-linux.outputs.cache-hit != 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=BuildOpenDDSharpNativeTask --BuildConfiguration=${{ env.BuildConfiguration }} --BuildPlatform=${{ env.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False
      working-directory: ${{ github.workspace }}/Build

    - name: Build Native (Cached)
      shell: pwsh
      if: steps.opendds-libraries-linux.outputs.cache-hit == 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=BuildOpenDDSharpNativeTask --exclusive --BuildConfiguration=${{ env.BuildConfiguration }} --BuildPlatform=${{ env.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=True --IgnoreThirdPartyBuild=True
      working-directory: ${{ github.workspace }}/Build

    - name: Dotnet restore
      shell: bash
      run: |
        dotnet restore ${{ github.workspace }}/OpenDDSharp.sln --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Examples/ConsoleDemoCore/ConsoleDemoCore.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/TestSupportProcessCore/TestSupportProcessCore.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/TestSupportProcessCore/TestSupportProcessCore.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp.BuildTasks project
      shell: bash
      run: dotnet build ${{ github.workspace }}/Sources/OpenDDSharp.BuildTasks/OpenDDSharp.BuildTasks.csproj --configuration ${{ env.BuildConfiguration }}
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp TestSupportProcessCore project
      shell: bash
      run: dotnet build ${{ github.workspace }}/Tests/TestSupportProcessCore/TestSupportProcessCore.csproj --configuration ${{ env.BuildConfiguration }} --runtime linux-x64
      working-directory: ${{ github.workspace }}
      env:
        DDS_ROOT: "${{ github.workspace }}/ext/OpenDDS_Linux"
        ACE_ROOT: "${{ github.workspace }}/ext/OpenDDS_Linux/ACE_wrappers"
        TAO_ROOT: "${{ github.workspace }}/ext/OpenDDS_Linux/ACE_wrappers/TAO"

    - name: Build OpenDDSharp UnitTest project
      shell: bash
      run: dotnet build ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --configuration ${{ env.BuildConfiguration }} --runtime linux-x64
      working-directory: ${{ github.workspace }}
      env:
        DDS_ROOT: "${{ github.workspace }}/ext/OpenDDS_Linux"
        ACE_ROOT: "${{ github.workspace }}/ext/OpenDDS_Linux/ACE_wrappers"
        TAO_ROOT: "${{ github.workspace }}/ext/OpenDDS_Linux/ACE_wrappers/TAO"


    - name: Test OpenDDSharp
      shell: bash
      run: dotnet test ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --no-build --no-restore --verbosity detailed --configuration ${{ env.BuildConfiguration }} --runtime linux-x64 --collect "XPlat code coverage" --logger "trx;LogFileName=test-results.trx" --logger "console;verbosity=detailed""console;verbosity=detailed" --settings ${{ github.workspace }}/Tests.runsettings --test-adapter-path "${{ github.workspace }}/packages/coverlet.collector/6.0.0/build/netstandard1.0/"
      working-directory: ${{ github.workspace }}
      env:
        DDS_ROOT: "${{ github.workspace }}/ext/OpenDDS_Linux"
        ACE_ROOT: "${{ github.workspace }}/ext/OpenDDS_Linux/ACE_wrappers"
        TAO_ROOT: "${{ github.workspace }}/ext/OpenDDS_Linux/ACE_wrappers/TAO"
        LD_LIBRARY_PATH: "${{ github.workspace }}/ext/OpenDDS_Linux/lib:${{ github.workspace }}/ext/OpenDDS_Linux/ACE_wrappers/lib:."
        MONO_THREADS_SUSPEND: preemptive

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: "Test Report: linux-x64"
        path: TestResults/netcoreapp3.1/test-results.trx,TestResults/net5.0/test-results.trx,TestResults/net6.0/test-results.trx,TestResults/net7.0/test-results.trx,TestResults/net461/test-results.trx,TestResults/net462/test-results.trx,TestResults/net47/test-results.trx,TestResults/net471/test-results.trx,TestResults/net472/test-results.trx,TestResults/net48/test-results.trx
        reporter: dotnet-trx

    - name: Get path to lcov file
      id: get_lcov_path
      shell: bash
      run: printf 'lcov_path=%s\n' ${{ github.workspace }}/TestResults/net6.0/*/coverage.info >> $GITHUB_OUTPUT

    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ steps.get_lcov_path.outputs.lcov_path }}
        format: lcov
        parallel: true
        flag-name: coverage-linux-x64-Release

  build_macos:
    runs-on: macos-latest

    env:
      OpenDdsVersion: "3.25"
      BuildPlatform: "x64"
      BuildConfiguration: "Release"
      LD_RPATH_FLAGS: "-Wl,-rpath,@executable_path -Wl,-rpath,@loader_path"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup dotnet 6.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    # Downgrade due to: https://github.com/microsoft/vstest/issues/4549
    - name: Setup dotnet 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.401'

    - name: Cache OpenDDS libraries
      id: opendds-libraries-macos
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/ext/OpenDDS_MacOS/cmake/**/*
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.pl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/lib*.dylib
          ${{ github.workspace }}/ext/OpenDDS_MacOS/bin/
          ${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_wrappers/bin
          ${{ github.workspace }}/ext/OpenDDS_MacOS/dds/idl/IDLTemplate.txt
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.h
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.hpp
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.cpp
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.inl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.idl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.pidl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/VERSION.txt
          ${{ github.workspace }}/ext/OpenDDS_MacOS/tools/
          ${{ github.workspace }}/ext/OpenDDS_MacOS/dds/InfoRepo/DCPSInfoRepo
          ${{ github.workspace }}/ext/OpenDDS_MacOS/dds/idl/opendds_idl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_wrappers/apps/gperf/src/ace_gperf
          ${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_wrappers/TAO/TAO_IDL/tao_idl
        key: opendds-cache-${{ env.OpenDdsVersion }}-osx-${{ env.BuildPlatform }}-ci

    - name: Build Native (No cached)
      shell: pwsh
      if: steps.opendds-libraries-macos.outputs.cache-hit != 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=BuildOpenDDSharpNativeTask --BuildConfiguration=${{ env.BuildConfiguration }} --BuildPlatform=${{ env.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False
      working-directory: ${{ github.workspace }}/Build

    - name: Build Native (Cached)
      shell: pwsh
      if: steps.opendds-libraries-macos.outputs.cache-hit == 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=BuildOpenDDSharpNativeTask --exclusive --BuildConfiguration=${{ env.BuildConfiguration }} --BuildPlatform=${{ env.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=True --IgnoreThirdPartyBuild=True
      working-directory: ${{ github.workspace }}/Build

    - name: Dotnet restore
      shell: bash
      run: |
        dotnet restore ${{ github.workspace }}/OpenDDSharp.sln --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Examples/ConsoleDemoCore/ConsoleDemoCore.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/TestSupportProcessCore/TestSupportProcessCore.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/TestSupportProcessCore/TestSupportProcessCore.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp.BuildTasks project
      shell: bash
      run: dotnet build ${{ github.workspace }}/Sources/OpenDDSharp.BuildTasks/OpenDDSharp.BuildTasks.csproj --configuration ${{ env.BuildConfiguration }}
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp TestSupportProcessCore Project
      shell: bash
      run: dotnet build ${{ github.workspace }}/Tests/TestSupportProcessCore/TestSupportProcessCore.csproj --configuration ${{ env.BuildConfiguration }} --runtime osx-x64
      working-directory: ${{ github.workspace }}
      env:
        DDS_ROOT: "${{ github.workspace }}/ext/OpenDDS_MacOS"
        ACE_ROOT: "${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_wrappers"
        TAO_ROOT: "${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_wrappers/TAO"

    - name: Build OpenDDSharp UnitTest Project
      shell: bash
      run: dotnet build ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --configuration ${{ env.BuildConfiguration }} --runtime osx-x64
      working-directory: ${{ github.workspace }}
      env:
        DDS_ROOT: "${{ github.workspace }}/ext/OpenDDS_MacOS"
        ACE_ROOT: "${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_wrappers"
        TAO_ROOT: "${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_wrappers/TAO"

    - name: Test OpenDDSharp
      shell: bash
      run: dotnet test ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --no-build --no-restore --verbosity diagnostic --configuration ${{ env.BuildConfiguration }} --runtime osx-x64 --collect "XPlat code coverage" --settings ${{ github.workspace }}/Tests.runsettings --logger "trx;LogFileName=test-results.trx" --logger "console;verbosity=detailed" --test-adapter-path "${{ github.workspace }}/packages/coverlet.collector/6.0.0/build/netstandard1.0/"
      working-directory: ${{ github.workspace }}
      env:
        DDS_ROOT: "${{ github.workspace }}/ext/OpenDDS_MacOS"
        ACE_ROOT: "${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_wrappers"
        TAO_ROOT: "${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_wrappers/TAO"
        DYLD_FALLBACK_LIBRARY_PATH: "${{ github.workspace }}/ext/OpenDDS_MacOS/lib:${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_wrappers/lib:."

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: "Test Report: osx-x64"
        path: TestResults/netcoreapp3.1/test-results.trx,TestResults/net5.0/test-results.trx,TestResults/net6.0/test-results.trx,TestResults/net7.0/test-results.trx,TestResults/net461/test-results.trx,TestResults/net462/test-results.trx,TestResults/net47/test-results.trx,TestResults/net471/test-results.trx,TestResults/net472/test-results.trx,TestResults/net48/test-results.trx
        reporter: dotnet-trx

    - name: Get path to lcov file
      id: get_lcov_path
      shell: bash
      run: printf 'lcov_path=%s\n' ${{ github.workspace }}/TestResults/net6.0/*/coverage.info >> $GITHUB_OUTPUT

    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ steps.get_lcov_path.outputs.lcov_path }}
        format: lcov
        parallel: true
        flag-name: coverage-macos-x64-Release

  publish_coveralls:
    runs-on: ubuntu-latest
    needs: [build_windows, build_linux, build_macos]
    steps:
      - name: Publish coverage on Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
          carryforward: coverage-windows-x64-Release,coverage-windows-x64-Debug,coverage-windows-x86-Release,coverage-windows-x86-Debug,coverage-linux-x64-Release,coverage-macos-x64-Release

