name: Continuous Delivery

on:
  workflow_dispatch:
    branches: [ develop, main ]
    inputs:
      publish:
        type: boolean
        required: true
        description: Publish the NuGet packages to nuget.org

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_windows_native:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        BuildPlatform: [x64, x86]
        BuildConfiguration: [Release]
    env:
      OpenDdsVersion: "3.23.1"

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Cache OpenDDS libraries
      id: opendds-libraries-windows-cd
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/README.md
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/cmake/**/*.cmake
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.pl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.dll
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.lib
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.exe
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/dds/idl/IDLTemplate.txt
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.h
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.hpp
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.cpp
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.inl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.idl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/**/*.pidl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.BuildPlatform }}/VERSION.txt
        key: opendds-windows-${{ env.OpenDdsVersion }}-${{ matrix.BuildConfiguration }}-${{ matrix.BuildPlatform }}-cd1

    - name: Build Native (No cached)
      shell: pwsh
      if: steps.opendds-libraries-windows-cd.outputs.cache-hit != 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=BuildOpenDDSharpNativeTask --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False --VisualStudioVersion=VS2022
      working-directory: ${{ github.workspace }}/Build

    - name: Build Native (Cached)
      shell: pwsh
      if: steps.opendds-libraries-windows-cd.outputs.cache-hit == 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=BuildOpenDDSharpNativeTask --exclusive --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=True --IgnoreThirdPartyBuild=True --VisualStudioVersion=VS2022
      working-directory: ${{ github.workspace }}/Build

#    - name: Build native with Cake
#      shell: pwsh
#      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=BuildOpenDDSharpNativeTask --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False --VisualStudioVersion=VS2022
#      working-directory: ${{ github.workspace }}/Build

    - name: Stage Native
      shell: pwsh
      run: |
        $targetDir = ".\opendds-native-win-${{ matrix.BuildPlatform }}"
        New-Item -Path "." -Name "opendds-native-win-${{ matrix.BuildPlatform }}" -ItemType "directory"
        
        XCOPY ".\README.md" "$targetDir\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\dds\idl\IDLTemplate.txt" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\dds\idl\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\VERSION.txt" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\Native\build_${{ matrix.BuildPlatform }}\OpenDDSWrapper\Release\OpenDDSWrapper.dll" "$targetDir\Native\build_${{ matrix.BuildPlatform }}\OpenDDSWrapper\Release\" /D /S /Y /M
        XCOPY ".\Native\build_${{ matrix.BuildPlatform }}\OpenDDSharp.IdlGenerator\Release\openddsharp_idl.exe" "$targetDir\Native\build_${{ matrix.BuildPlatform }}\OpenDDSharp.IdlGenerator\Release\" /D /S /Y /M
        
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.cmake" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.pl" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.dll" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.lib" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.exe" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.h" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.hpp" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.cpp" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.inl" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.idl" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.BuildPlatform }}\*.pidl" "$targetDir\OpenDDS_${{ matrix.BuildPlatform }}\" /D /S /Y /M
        
        $compress = @{
          Path = $targetDir
          CompressionLevel = "Fastest"
          DestinationPath = ".\opendds-native-win-${{ matrix.BuildPlatform }}.zip"
        }
        Compress-Archive @compress        

    - name: Artifacts OpenDDS libraries
      uses: actions/upload-artifact@v3
      with:
        name: opendds-win-${{ matrix.BuildPlatform }}-${{ github.run_number }}
        path: ${{ github.workspace }}/opendds-native-win-${{ matrix.BuildPlatform }}.zip

  build_linux_native:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        BuildPlatform: [x64]
        BuildConfiguration: [Release]
    env:
      OpenDdsVersion: "3.23.1"
      LD_RPATH_FLAGS: "-Wl,-z,origin -Wl,-rpath,$ORIGIN"

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Cache OpenDDS libraries
      id: opendds-libraries-linux-cd
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/README.md
          ${{ github.workspace }}/ext/OpenDDS_Linux/cmake/**/*.cmake
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.pl
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/lib*.so*
          ${{ github.workspace }}/ext/OpenDDS_Linux/bin
          ${{ github.workspace }}/ext/OpenDDS_Linux/ACE_TAO/ACE/bin
          ${{ github.workspace }}/ext/OpenDDS_Linux/dds/idl/IDLTemplate.txt
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.h
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.hpp
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.cpp
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.inl
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.idl
          ${{ github.workspace }}/ext/OpenDDS_Linux/**/*.pidl
          ${{ github.workspace }}/ext/OpenDDS_Linux/VERSION.txt
          ${{ github.workspace }}/ext/OpenDDS_Linux/dds/InfoRepo/DCPSInfoRepo
          ${{ github.workspace }}/ext/OpenDDS_Linux/tools/dcpsinfo_dump/dcpsinfo_dump
          ${{ github.workspace }}/ext/OpenDDS_Linux/dds/idl/opendds_idl
          ${{ github.workspace }}/ext/OpenDDS_Linux/tools/repoctl/repoctl
          ${{ github.workspace }}/ext/OpenDDS_Linux/ACE_TAO/ACE/apps/gperf/src/ace_gperf
          ${{ github.workspace }}/ext/OpenDDS_Linux/ACE_TAO/TAO/TAO_IDL/tao_idl
        key: opendds-linux-${{ env.OpenDdsVersion }}-${{ matrix.BuildConfiguration }}-${{ matrix.BuildPlatform }}-cd

    - name: Build Native (No cached)
      shell: pwsh
      if: steps.opendds-libraries-linux-cd.outputs.cache-hit != 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=BuildOpenDDSharpNativeTask --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False
      working-directory: ${{ github.workspace }}/Build

    - name: Build Native (Cached)
      shell: pwsh
      if: steps.opendds-libraries-linux-cd.outputs.cache-hit == 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=BuildOpenDDSharpNativeTask --exclusive --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=True --IgnoreThirdPartyBuild=True
      working-directory: ${{ github.workspace }}/Build

#    - name: Build Native
#      shell: pwsh
#      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=BuildOpenDDSharpNativeTask --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False
#      working-directory: ${{ github.workspace }}/Build

    - name: Stage Native
      shell: pwsh
      run: |
        $sourceDir = "./ext/OpenDDS_Linux"
        $targetDir = "${{ github.workspace }}/opendds-native-linux-x64"
        mkdir "$targetDir"
             
        rsync -am --include='*.cmake' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.pl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*lib*.so*' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='bin/*' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='ACE_TAO/ACE/bin/*' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.h' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.hpp' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.cpp' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.inl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.idl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.pidl' --include='*/' --exclude='*' $sourceDir $targetDir
        
        rsync -am --include='README.md' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='dds/idl/IDLTemplate.txt' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='Native/build_Linux/OpenDDSWrapper/libOpenDDSWrapper.so' --include='*/' --exclude='*' $sourceDir/../../ $targetDir
        rsync -am --include='Native/build_Linux/OpenDDSharp.IdlGenerator/openddsharp_idl' --include='*/' --exclude='*' $sourceDir/../../ $targetDir
        rsync -am --include='dds/InfoRepo/DCPSInfoRepo' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='tools/dcpsinfo_dump/dcpsinfo_dump' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='dds/idl/opendds_idl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='tools/repoctl/repoctl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='ACE_TAO/ACE/apps/gperf/src/ace_gperf' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='ACE_TAO/TAO/TAO_IDL/tao_idl' --include='*/' --exclude='*' $sourceDir $targetDir
        
        zip --symlinks -r "opendds-native-linux-x64.zip" "./opendds-native-linux-x64"

    - name: Artifact OpenDDS libraries
      uses: actions/upload-artifact@v3
      with:
        name: opendds-linux-x64-${{ github.run_number }}
        path: ${{ github.workspace }}/opendds-native-linux-x64.zip

  build_macos_native:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        BuildPlatform: [x64]
        BuildConfiguration: [Release]
    env:
      OpenDdsVersion: "3.23.1"
      LD_RPATH_FLAGS: "-Wl,-rpath,@executable_path -Wl,-rpath,@loader_path"

    steps:

    - uses: actions/checkout@v3

    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Cache OpenDDS libraries
      id: opendds-libraries-macos-cd
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/README.md
          ${{ github.workspace }}/ext/OpenDDS_MacOS/cmake/**/*.cmake
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.pl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/lib*.dylib
          ${{ github.workspace }}/ext/OpenDDS_MacOS/bin
          ${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_TAO/ACE/bin
          ${{ github.workspace }}/ext/OpenDDS_MacOS/dds/idl/IDLTemplate.txt
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.h
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.hpp
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.cpp
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.inl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.idl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/**/*.pidl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/VERSION.txt
          ${{ github.workspace }}/ext/OpenDDS_MacOS/dds/InfoRepo/DCPSInfoRepo
          ${{ github.workspace }}/ext/OpenDDS_MacOS/tools/dcpsinfo_dump/dcpsinfo_dump
          ${{ github.workspace }}/ext/OpenDDS_MacOS/dds/idl/opendds_idl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/tools/repoctl/repoctl
          ${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_TAO/ACE/apps/gperf/src/ace_gperf
          ${{ github.workspace }}/ext/OpenDDS_MacOS/ACE_TAO/TAO/TAO_IDL/tao_idl
        key: opendds-macos-${{ env.OpenDdsVersion }}-${{ matrix.BuildConfiguration }}-${{ matrix.BuildPlatform }}-cd

    - name: Build Native (No cached)
      shell: pwsh
      if: steps.opendds-libraries-macos-cd.outputs.cache-hit != 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=BuildOpenDDSharpNativeTask --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False
      working-directory: ${{ github.workspace }}/Build
      
    - name: Build Native (Cached)
      shell: pwsh
      if: steps.opendds-libraries-macos-cd.outputs.cache-hit == 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=BuildOpenDDSharpNativeTask --exclusive --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=True --IgnoreThirdPartyBuild=True
      working-directory: ${{ github.workspace }}/Build

#    - name: Build Native
#      shell: pwsh
#      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=BuildOpenDDSharpNativeTask --BuildConfiguration=${{ matrix.BuildConfiguration }} --BuildPlatform=${{ matrix.BuildPlatform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False
#      working-directory: ${{ github.workspace }}/Build

    - name: Stage Native
      shell: pwsh
      run: |
        $sourceDir = "./ext/OpenDDS_MacOS"
        $targetDir = "${{ github.workspace }}/opendds-native-osx-x64"
        mkdir "$targetDir"
        
        rsync -am --include='*.cmake' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.pl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*lib*.dylib' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='bin/*' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='ACE_TAO/ACE/bin/*' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.h' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.hpp' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.cpp' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.inl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.idl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='*.pidl' --include='*/' --exclude='*' $sourceDir $targetDir
        
        rsync -am --include='README.md' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='dds/idl/IDLTemplate.txt' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='Native/build_MacOS/OpenDDSWrapper/libOpenDDSWrapper.dylib' --include='*/' --exclude='*' $sourceDir/../../ $targetDir
        rsync -am --include='Native/build_MacOS/OpenDDSharp.IdlGenerator/openddsharp_idl' --include='*/' --exclude='*' $sourceDir/../../ $targetDir
        rsync -am --include='dds/InfoRepo/DCPSInfoRepo' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='tools/dcpsinfo_dump/dcpsinfo_dump' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='dds/idl/opendds_idl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='tools/repoctl/repoctl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='ACE_TAO/ACE/apps/gperf/src/ace_gperf' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -am --include='ACE_TAO/TAO/TAO_IDL/tao_idl' --include='*/' --exclude='*' $sourceDir $targetDir
        
        zip --symlinks -r "opendds-native-osx-x64.zip" "./opendds-native-osx-x64"

    - name: Artifacts OpenDDS libraries
      uses: actions/upload-artifact@v3
      with:
        name: opendds-osx-x64-${{ github.run_number }}
        path: ${{ github.workspace }}/opendds-native-osx-x64.zip

  build_openddsharp_windows:
    runs-on: windows-latest
    needs: [build_windows_native, build_linux_native, build_macos_native]
    env:
      OpenDdsVersion: "3.23.1"
      MajorVersion: "0"
      MinorVersion: "8"

    steps:
    - uses: actions/checkout@v3

    - name: Setup dotnet 6.0
      shell: pwsh
      run: |
        Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
        ./dotnet-install.ps1 -Architecture 'x64' -Channel 6.0;
        echo "PATH=$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Setup dotnet 7.0
      shell: pwsh
      run: |
        Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
        ./dotnet-install.ps1 -Architecture 'x64' -Channel 7.0;
        echo "PATH=$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
    
    - name: Get branch names
      id: branch-name
      uses: tj-actions/branch-names@v6

    - name: Download OpenDDS Native win-x86
      uses: actions/download-artifact@v3
      with:
        name: opendds-win-x86-${{ github.run_number }}

    - name: Download OpenDDS Native win-x64
      uses: actions/download-artifact@v3
      with:
        name: opendds-win-x64-${{ github.run_number }}

    - name: Download OpenDDS Native linux-x64
      uses: actions/download-artifact@v3
      with:
        name: opendds-linux-x64-${{ github.run_number }}

    - name: Download artifacts OpenDDS MacOS
      uses: actions/download-artifact@v3
      with:
        name: opendds-osx-x64-${{ github.run_number }}
        
    - name: Prepare OpenDDS Native
      shell: pwsh
      run: |
        Expand-Archive -Path "${{ github.workspace }}\opendds-native-win-x64.zip" -DestinationPath "."
        Expand-Archive -Path "${{ github.workspace }}\opendds-native-win-x86.zip" -DestinationPath "."
        Expand-Archive -Path "${{ github.workspace }}\opendds-native-linux-x64.zip" -DestinationPath "."
        Expand-Archive -Path "${{ github.workspace }}\opendds-native-osx-x64.zip" -DestinationPath "."
        
        XCOPY ".\opendds-native-win-x64\OpenDDS_x64\*" "${{ github.workspace }}\ext\OpenDDS_x64\" /D /S /Y /M
        XCOPY ".\opendds-native-win-x64\Native\*" "${{ github.workspace }}\Native\" /D /S /Y /M
        
        XCOPY ".\opendds-native-win-x86\OpenDDS_x86\*" "${{ github.workspace }}\ext\OpenDDS_x86\" /D /S /Y /M
        XCOPY ".\opendds-native-win-x86\Native\*" "${{ github.workspace }}\Native\" /D /S /Y /M
        
        XCOPY ".\opendds-native-linux-x64\OpenDDS_Linux\*" "${{ github.workspace }}\ext\OpenDDS_Linux\" /D /S /Y /M
        XCOPY ".\opendds-native-linux-x64\Native\*" "${{ github.workspace }}\Native\" /D /S /Y /M
        
        XCOPY ".\opendds-native-osx-x64\OpenDDS_MacOS\*" "${{ github.workspace }}\ext\OpenDDS_MacOS\" /D /S /Y /M
        XCOPY ".\opendds-native-osx-x64\Native\*" "${{ github.workspace }}\Native\" /D /S /Y /M

    - name: Set release version
      shell: pwsh
      run: ${{ github.workspace }}\Build\OpenDDSharp.Build.Standard.ps1 --target=SetVersion --MajorVersion=${{ env.MajorVersion }} --MinorVersion=${{ env.MinorVersion }} --RunNumber=${{ github.run_number }} --BranchName=${{ steps.branch-name.outputs.current_branch }}
      working-directory: ${{ github.workspace }}\Build

    - name: Dotnet restore
      shell: cmd
      run: |
        dotnet restore ${{ github.workspace }}/OpenDDSharp.Standard.sln --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Examples/ConsoleDemoCore/ConsoleDemoCore.csproj --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/TestSupportProcessCore/TestSupportProcessCore.csproj --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/OpenDDSharp.Standard.UnitTest/OpenDDSharp.Standard.UnitTest.csproj --no-cache --configfile ${{ github.workspace }}/nuget.config
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp.BuildTasks project
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp.BuildTasks/OpenDDSharp.BuildTasks.csproj -property:Configuration=Release
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp solution x86
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp.Standard/OpenDDSharp.Standard.csproj -property:Configuration=Release -property:Platform=x86
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp solution x64
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp.Standard/OpenDDSharp.Standard.csproj -property:Configuration=Release -property:Platform=x64
      working-directory: ${{ github.workspace }}

    - name: Build & Test with Cake
      shell: pwsh
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --BuildConfiguration=Release --BuildPlatform=x64 --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=True --IgnoreThirdPartyBuild=True --VisualStudioVersion=VS2022
      working-directory: ${{ github.workspace }}/Build

    - name: Prepare coverage result
      shell: pwsh
      run: Get-ChildItem -Path ${{ github.workspace }}/TestResults -Include *.info -Recurse | ForEach-Object { Copy-Item -Path $_.FullName -Destination ${{ github.workspace }}/TestResults }
      working-directory: ${{ github.workspace }}

    - name: Coveralls
      uses: coverallsapp/github-action@v1.2.4
      with:
        github-token: ${{secrets.GITHUB_TOKEN }}
        path-to-lcov: ${{ github.workspace }}/TestResults/coverage.info

    - name: Build OpenDDSharp solution AnyCPU
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp.Standard/OpenDDSharp.Standard.csproj -property:Configuration=Release -property:Platform=AnyCPU
      working-directory: ${{ github.workspace }}

    - name: Create release packages
      shell: pwsh
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=Pack --MajorVersion=${{ env.MajorVersion }} --MinorVersion=${{ env.MinorVersion }} --RunNumber=${{ github.run_number }} --BranchName=${{ steps.branch-name.outputs.current_branch }}
      working-directory: ${{ github.workspace }}/Build

    - name: NuGet Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: openddsharp-nuget-${{ env.MajorVersion }}-${{ env.MinorVersion }}-${{ github.run_number }}
        path: |
          ${{ github.workspace }}/Release/*.nupkg

    - name: Publish NuGet packages
      if:  ${{ github.event.inputs.publish == 'true' }}
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      shell: pwsh
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.Standard.ps1 --target=Publish --NugetApiKey="$env:NUGET_API_KEY" --BranchName=${{ steps.branch-name.outputs.current_branch }}
      working-directory: ${{ github.workspace }}/Build

