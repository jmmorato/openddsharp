name: Continuous Delivery

on:
  push:
    branches:
      - develop
      - main
  schedule:
    - cron: '0 1 * * SUN'
  pull_request:
  workflow_dispatch:
    inputs:
      publish:
        type: boolean
        required: true
        default: false
        description: Publish the NuGet packages to nuget.org

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  OpenDdsVersion: "3.31"

jobs:
  build_windows_native:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            runtime: win-x64
            build_platform: x64
          - os: windows-2022
            runtime: win-x86
            build_platform: x86

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup dotnet 8.0
      shell: pwsh
      run: |
        Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
        ./dotnet-install.ps1 -Architecture '${{ matrix.build_platform }}' -Channel 8.0;
        echo "PATH=$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append      

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: ${{ matrix.build_platform }}

    - name: Cache OpenDDS libraries
      id: opendds-libraries-windows-cd
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/README.md
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/cmake/**/*
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/tools/rapidjson/**/*
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/**/*.pl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/**/*.dll
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/**/*.lib
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/**/*.exe
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/dds/idl/IDLTemplate.txt
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/**/*.h
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/**/*.hpp
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/**/*.cpp
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/**/*.inl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/**/*.idl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/**/*.pidl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/VERSION.txt
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/ACE_wrappers/VERSION.txt
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.build_platform }}/ACE_wrappers/TAO/VERSION.txt
        key: opendds-cache-${{ env.OpenDdsVersion }}-${{ matrix.runtime }}-cd

    - name: Build Native Release (No cached)
      shell: pwsh
      if: steps.opendds-libraries-windows-cd.outputs.cache-hit != 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=BuildOpenDDSharpNativeTask --VisualStudioVersion=VS2022 --VisualStudioEdition=Enterprise --BuildConfiguration=Release --BuildPlatform=${{ matrix.build_platform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False
      working-directory: ${{ github.workspace }}/Build

    - name: Build Native Release (Cached)
      shell: pwsh
      if: steps.opendds-libraries-windows-cd.outputs.cache-hit == 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=BuildOpenDDSharpNativeTask --exclusive --VisualStudioVersion=VS2022 --VisualStudioEdition=Enterprise --BuildConfiguration=Release --BuildPlatform=${{ matrix.build_platform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=True --IgnoreThirdPartyBuild=True
      working-directory: ${{ github.workspace }}/Build

    - name: Stage Native
      shell: pwsh
      run: |
        $targetDir = ".\opendds-native-${{ matrix.runtime }}"
        New-Item -Path "." -Name "opendds-native-${{ matrix.runtime }}" -ItemType "directory"
        
        XCOPY ".\README.md" "$targetDir\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\dds\idl\IDLTemplate.txt" "$targetDir\OpenDDS_${{ matrix.build_platform }}\dds\idl\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\VERSION.txt" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\ACE_wrappers\VERSION.txt" "$targetDir\OpenDDS_${{ matrix.build_platform }}\ACE_wrappers\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\ACE_wrappers\TAO\VERSION.txt" "$targetDir\OpenDDS_${{ matrix.build_platform }}\ACE_wrappers\" /D /S /Y /M
        XCOPY ".\Native\build_${{ matrix.build_platform }}\OpenDDSWrapper\Release\OpenDDSWrapper.dll" "$targetDir\Native\build_${{ matrix.build_platform }}\OpenDDSWrapper\Release\" /D /S /Y /M
        XCOPY ".\Native\build_${{ matrix.build_platform }}\OpenDDSharp.IdlGenerator\Release\openddsharp_idl.exe" "$targetDir\Native\build_${{ matrix.build_platform }}\OpenDDSharp.IdlGenerator\Release\" /D /S /Y /M
        XCOPY ".\Native\build_${{ matrix.build_platform }}\OpenDDSPerformanceTests\Release\OpenDDSPerformanceTests.dll" "$targetDir\Native\build_${{ matrix.build_platform }}\OpenDDSPerformanceTests\Release\" /D /S /Y /M
        XCOPY ".\Native\build_${{ matrix.build_platform }}\OpenDDSTestData\Release\OpenDDSTestData.dll" "$targetDir\Native\build_${{ matrix.build_platform }}\OpenDDSTestData\Release\" /D /S /Y /M
        
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\cmake\*" "$targetDir\OpenDDS_${{ matrix.build_platform }}\cmake\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\tools\rapidjson\*" "$targetDir\OpenDDS_${{ matrix.build_platform }}\tools\rapidjson\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.cmake" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.pl" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.dll" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.lib" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.exe" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.h" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.hpp" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.cpp" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.inl" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.idl" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        XCOPY ".\ext\OpenDDS_${{ matrix.build_platform }}\*.pidl" "$targetDir\OpenDDS_${{ matrix.build_platform }}\" /D /S /Y /M
        
        $compress = @{
          Path = $targetDir
          CompressionLevel = "Fastest"
          DestinationPath = ".\opendds-native-${{ matrix.runtime }}.zip"
        }
        Compress-Archive @compress        

    - name: Artifacts OpenDDS libraries
      uses: actions/upload-artifact@v4
      with:
        name: opendds-${{ matrix.runtime }}-${{ github.run_number }}
        path: ${{ github.workspace }}/opendds-native-${{ matrix.runtime }}.zip

  build_linux_native:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            runtime: linux-x64
            build_platform: x64
          - os: ubuntu-22.04-arm
            runtime: linux-arm64
            build_platform: ARM64

    runs-on: ${{ matrix.os }}

    env:
      BuildConfiguration: "Release"
      LD_RPATH_FLAGS: "-Wl,-E -Wl,-rpath,'$ORIGIN'"
      LD_LIBRARY_PATH: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/lib:${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/lib:."

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup dotnet 8.0
      shell: sh
      run: |
        curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --architecture '${{ matrix.build_platform }}' --channel 8.0
        echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
        echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc

    - name: Cache OpenDDS libraries
      id: opendds-libraries-linux-cd
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/README.md
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/cmake/**/*
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/tools/rapidjson/**/*
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.pl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/lib*.so*
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/bin/
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/bin/
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/dds/idl/IDLTemplate.txt
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.h
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.hpp
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.cpp
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.inl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.idl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.pidl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/VERSION.txt
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/tools/
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/dds/InfoRepo/DCPSInfoRepo          
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/dds/idl/opendds_idl          
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/apps/gperf/src/ace_gperf
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/TAO/TAO_IDL/tao_idl
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/VERSION.txt
          ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/TAO/VERSION.txt
        key: opendds-cache-${{ env.OpenDdsVersion }}-${{ matrix.runtime }}-cd

    - name: Build Native (No cached)
      shell: pwsh
      if: steps.opendds-libraries-linux-cd.outputs.cache-hit != 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=BuildOpenDDSharpNativeTask --BuildConfiguration=${{ env.BuildConfiguration }} --BuildPlatform=${{ matrix.build_platform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False
      working-directory: ${{ github.workspace }}/Build

    - name: Build Native (Cached)
      shell: pwsh
      if: steps.opendds-libraries-linux-cd.outputs.cache-hit == 'true'
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=BuildOpenDDSharpNativeTask --exclusive --BuildConfiguration=${{ env.BuildConfiguration }} --BuildPlatform=${{ matrix.build_platform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=True --IgnoreThirdPartyBuild=True
      working-directory: ${{ github.workspace }}/Build

    - name: Stage Native
      shell: pwsh
      run: |
        $sourceDir = "./ext/OpenDDS_${{ matrix.runtime }}"
        $targetDir = "./opendds-native-${{ matrix.runtime }}"
        mkdir "$targetDir"

        rsync -r -m -v --include='*.pl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v --include='*.h' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v --include='*.hpp' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v --include='*.cpp' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v --include='*.inl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v --include='*.idl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v --include='*.pidl' --include='*/' --exclude='*' $sourceDir $targetDir
        
        rsync -r -m -v -LKH --include='bin/*' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v -LKH --include='tools/*' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v -LKH --include='cmake/*' --include='*/' --exclude='*' $sourceDir $targetDir
        
        rsync -r -m -v -LKH --include='*lib*.so*' --include='*/' --exclude='*' $sourceDir $targetDir
                
        rsync -r -m -v --include='VERSION.txt' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v --include='dds/idl/IDLTemplate.txt' --include='*/' --exclude='*' $sourceDir $targetDir       
        rsync -r -m -v -L --include='dds/InfoRepo/DCPSInfoRepo' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v -L --include='tools/dcpsinfo_dump/dcpsinfo_dump'--include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v -L --include='dds/idl/opendds_idl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v -L --include='tools/repoctl/repoctl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v -L --include='ACE_wrappers/apps/gperf/src/ace_gperf' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v -L --include='ACE_wrappers/TAO/TAO_IDL/tao_idl' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v -L --include='ACE_wrappers/VERSION.txt' --include='*/' --exclude='*' $sourceDir $targetDir
        rsync -r -m -v -L --include='ACE_wrappers/TAO/VERSION.txt' --include='*/' --exclude='*' $sourceDir $targetDir
        
        rsync -r -m -v --include='README.md' --include='*/' --exclude='*' ./ $targetDir
        rsync -r -m -v --include='Native/build_${{ matrix.runtime }}/OpenDDSWrapper/libOpenDDSWrapper.so' --include='*/' --exclude='*' ./ $targetDir
        rsync -r -m -v --include='Native/build_${{ matrix.runtime }}/OpenDDSharp.IdlGenerator/openddsharp_idl' --include='*/' --exclude='*' ./ $targetDir
        rsync -r -m -v --include='Native/build_${{ matrix.runtime }}/OpenDDSPerformanceTests/libOpenDDSPerformanceTests.so' --include='*/' --exclude='*' ./ $targetDir
        rsync -r -m -v --include='Native/build_${{ matrix.runtime }}/OpenDDSTestData/libOpenDDSTestData.so' --include='*/' --exclude='*' ./ $targetDir
        
        ls -la ./opendds-native-${{ matrix.runtime }}
        ls -la ./opendds-native-${{ matrix.runtime }}/OpenDDS_${{ matrix.runtime }}
        ls -la ./opendds-native-${{ matrix.runtime }}/Native
        
        zip -r "opendds-native-${{ matrix.runtime }}.zip" "./opendds-native-${{ matrix.runtime }}"

    - name: Artifact OpenDDS libraries
      uses: actions/upload-artifact@v4
      with:
        name: opendds-${{ matrix.runtime }}-${{ github.run_number }}
        path: ${{ github.workspace }}/opendds-native-${{ matrix.runtime }}.zip

  build_macos_native:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            runtime: osx-x64
            build_platform: x64
          - os: macos-14
            runtime: osx-arm64
            build_platform: ARM64

    runs-on: ${{ matrix.os }}

    env:
      LD_RPATH_FLAGS: "-Wl,-rpath,@executable_path -Wl,-rpath,@loader_path"
      DYLD_LIBRARY_PATH: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/lib:${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/lib:."
      DYLD_FALLBACK_LIBRARY_PATH: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/lib:${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/lib:."

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dotnet 8.0
        shell: sh
        run: |
          curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --architecture '${{ matrix.build_platform }}' --channel 8.0
          echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
          echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc
        working-directory: ${{ github.workspace }}

      - name: Cache OpenDDS libraries
        id: opendds-libraries-macos-cd
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/README.md
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/cmake/**/*
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/tools/rapidjson/**/*
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.pl
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/lib*.dylib
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/bin/
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/bin/
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/dds/idl/IDLTemplate.txt
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.h
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.hpp
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.cpp
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.inl
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.idl
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/**/*.pidl
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/VERSION.txt
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/tools/
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/dds/InfoRepo/DCPSInfoRepo          
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/dds/idl/opendds_idl          
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/apps/gperf/src/ace_gperf
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/TAO/TAO_IDL/tao_idl
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/VERSION.txt
            ${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/TAO/VERSION.txt
          key: opendds-cache-${{ env.OpenDdsVersion }}-${{ matrix.runtime }}-cd

      - name: Build Native (No cached)
        shell: pwsh
        if: steps.opendds-libraries-macos-cd.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=BuildOpenDDSharpNativeTask --BuildConfiguration=Release --BuildPlatform=${{ matrix.build_platform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=False --IgnoreThirdPartyBuild=False
        working-directory: ${{ github.workspace }}/Build

      - name: Build Native (Cached)
        shell: pwsh
        if: steps.opendds-libraries-macos-cd.outputs.cache-hit == 'true'
        run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=BuildOpenDDSharpNativeTask --exclusive --BuildConfiguration=Release --BuildPlatform=${{ matrix.build_platform }} --OpenDdsVersion=${{ env.OpenDdsVersion }} --IgnoreThirdPartySetup=True --IgnoreThirdPartyBuild=True
        working-directory: ${{ github.workspace }}/Build

      - name: Stage Native
        shell: pwsh
        run: |
          $sourceDir = "./ext/OpenDDS_${{ matrix.runtime }}"
          $targetDir = "./opendds-native-${{ matrix.runtime }}"
          mkdir "$targetDir"
          
          rsync -r -m -v --include='*.pl' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v --include='*.h' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v --include='*.hpp' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v --include='*.cpp' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v --include='*.inl' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v --include='*.idl' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v --include='*.pidl' --include='*/' --exclude='*' $sourceDir $targetDir
          
          rsync -r -m -v -LKH --include='bin/*' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v -LKH --include='tools/*' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v -LKH --include='cmake/*' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v -LKH --include='cmake/*' --include='*/' --exclude='*' $sourceDir $targetDir
          
          rsync -r -m -v -LKH --include='*lib*.dylib' --include='*/' --exclude='*' $sourceDir $targetDir
          
          rsync -r -m -v --include='VERSION.txt' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v --include='dds/idl/IDLTemplate.txt' --include='*/' --exclude='*' $sourceDir $targetDir       
          rsync -r -m -v -L --include='dds/InfoRepo/DCPSInfoRepo' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v -L --include='tools/dcpsinfo_dump/dcpsinfo_dump'--include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v -L --include='dds/idl/opendds_idl' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v -L --include='tools/repoctl/repoctl' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v -L --include='ACE_wrappers/apps/gperf/src/ace_gperf' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v -L --include='ACE_wrappers/TAO/TAO_IDL/tao_idl' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v -L --include='ACE_wrappers/VERSION.txt' --include='*/' --exclude='*' $sourceDir $targetDir
          rsync -r -m -v -L --include='ACE_wrappers/TAO/VERSION.txt' --include='*/' --exclude='*' $sourceDir $targetDir
          
          rsync -r -m -v --include='README.md' --include='*/' --exclude='*' ./ $targetDir
          rsync -r -m -v --include='Native/build_${{ matrix.runtime }}/OpenDDSWrapper/libOpenDDSWrapper.dylib' --include='*/' --exclude='*' ./ $targetDir
          rsync -r -m -v --include='Native/build_${{ matrix.runtime }}/OpenDDSharp.IdlGenerator/openddsharp_idl' --include='*/' --exclude='*' ./ $targetDir
          rsync -r -m -v --include='Native/build_${{ matrix.runtime }}/OpenDDSPerformanceTests/libOpenDDSPerformanceTests.dylib' --include='*/' --exclude='*' ./ $targetDir
          rsync -r -m -v --include='Native/build_${{ matrix.runtime }}/OpenDDSTestData/libOpenDDSTestData.dylib' --include='*/' --exclude='*' ./ $targetDir
          
          ls -la ./opendds-native-${{ matrix.runtime }}
          ls -la ./opendds-native-${{ matrix.runtime }}/OpenDDS_${{ matrix.runtime }}
          ls -la ./opendds-native-${{ matrix.runtime }}/Native
          
          zip -r "opendds-native-${{ matrix.runtime }}.zip" "./opendds-native-${{ matrix.runtime }}"
        working-directory: ${{ github.workspace }}

      - name: Artifacts OpenDDS libraries
        uses: actions/upload-artifact@v4
        with:
          name: opendds-${{ matrix.runtime }}-${{ github.run_number }}
          path: ${{ github.workspace }}/opendds-native-${{ matrix.runtime }}.zip

  unit_test_windows:
    needs: build_windows_native

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            runtime: win-x64
            build_platform: x64
          - os: windows-2019
            runtime: win-x86
            build_platform: x86
          - os: windows-2022
            runtime: win-x64
            build_platform: x64
          - os: windows-2022
            runtime: win-x86
            build_platform: x86
          - os: windows-2025
            runtime: win-x64
            build_platform: x64
          - os: windows-2025
            runtime: win-x86
            build_platform: x86

    runs-on: ${{ matrix.os }}

    env:
      DDS_ROOT: "${{ github.workspace }}\\ext\\OpenDDS_${{ matrix.build_platform }}"
      ACE_ROOT: "${{ github.workspace }}\\ext\\OpenDDS_${{ matrix.build_platform }}\\ACE_wrappers"
      TAO_ROOT: "${{ github.workspace }}\\ext\\OpenDDS_${{ matrix.build_platform }}\\ACE_wrappers\\TAO"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update PATH variable with OpenDDS libraries folders
        run: |
          echo "${{ github.workspace }}\ext\OpenDDS_${{ matrix.build_platform }}\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${{ github.workspace }}\ext\OpenDDS_${{ matrix.build_platform }}\ACE_wrappers\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        working-directory: ${{ github.workspace }}

      - name: Setup dotnet 6.0
        shell: pwsh
        run: |
          Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
          ./dotnet-install.ps1 -Architecture '${{ matrix.build_platform }}' -Channel 6.0;
          echo "PATH=$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        working-directory: ${{ github.workspace }}

      - name: Setup dotnet 7.0
        shell: pwsh
        run: |
          Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
          ./dotnet-install.ps1 -Architecture '${{ matrix.build_platform }}' -Channel 7.0;
          echo "PATH=$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        working-directory: ${{ github.workspace }}

      - name: Setup dotnet 8.0
        shell: pwsh
        run: |
          Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
          ./dotnet-install.ps1 -Architecture '${{ matrix.build_platform }}' -Channel 8.0;
          echo "PATH=$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        working-directory: ${{ github.workspace }}

      - name: Download ${{ matrix.runtime }} native
        uses: actions/download-artifact@v4
        with:
          name: opendds-${{ matrix.runtime }}-${{ github.run_number }}

      - name: Prepare ${{ matrix.runtime }} native
        shell: pwsh
        run: |
          Expand-Archive -Path "${{ github.workspace }}\opendds-native-${{ matrix.runtime }}.zip" -DestinationPath "."
          
          $sourceDir = ".\opendds-native-${{ matrix.runtime }}\OpenDDS_${{ matrix.build_platform }}"
          $targetDir = ".\ext\OpenDDS_${{ matrix.build_platform }}"
          mkdir "$targetDir"
          
          XCOPY "$sourceDir\*" "$targetDir\" /D /S /Y /M
          dir "$targetDir"
          
          $sourceDir = ".\opendds-native-${{ matrix.runtime }}\Native\build_${{ matrix.build_platform }}"
          $targetDir = ".\Native\build_${{ matrix.build_platform }}"
          mkdir "$targetDir"
          
          XCOPY "$sourceDir\*" "$targetDir\" /D /S /Y /M
          dir "$targetDir"
        working-directory: ${{ github.workspace }}

      - name: Dotnet restore
        shell: pwsh
        run: |
          dotnet restore ${{ github.workspace }}/OpenDDSharp.sln --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Examples/ConsoleDemo/ConsoleDemo.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Tests/TestSupportProcess/TestSupportProcess.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Tests/TestSupportProcess/TestSupportProcess.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Tests/TestIdlCdr/TestIdlCdr.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Tests/BenchmarkPerformance/BenchmarkPerformance.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        working-directory: ${{ github.workspace }}

      - name: Build OpenDDSharp.BuildTasks project
        shell: pwsh
        run: dotnet build ${{ github.workspace }}/Sources/OpenDDSharp.BuildTasks/OpenDDSharp.BuildTasks.csproj --configuration Release
        working-directory: ${{ github.workspace }}

      - name: Build OpenDDSharp TestSupportProcess project
        shell: pwsh
        run: dotnet build ${{ github.workspace }}/Tests/TestSupportProcess/TestSupportProcess.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained
        working-directory: ${{ github.workspace }}

      - name: Build OpenDDSharp UnitTest project
        shell: pwsh
        run: dotnet build ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained
        working-directory: ${{ github.workspace }}

      - name: Test OpenDDSharp
        shell: pwsh
        run: dotnet test ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --no-build --no-restore --results-directory ${{ github.workspace }}/TestResults --configuration Release --runtime ${{ matrix.runtime }} --collect:"XPlat Code Coverage" --settings ${{ github.workspace }}/Tests.runsettings --logger "console;verbosity=normal" --logger "trx;LogFilePrefix=test-results"
        working-directory: ${{ github.workspace }}

      - name: Test Report
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: "Test Report: ${{ matrix.os }}-${{ matrix.runtime }}"
          path: TestResults/test-results_*.trx
          reporter: dotnet-trx

      - name: Setup .NET Core 8.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
          dotnet-quality: 'ga'

      - name: Merge coverage reports
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: '**/*.cobertura.xml'
          targetdir: '${{ github.workspace }}/TestResults/reports.cobertura'
          reporttypes: 'HtmlInline;Cobertura'

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/TestResults/reports.cobertura/Cobertura.xml
          parallel: true
          flag-name: coverage-${{ matrix.os }}-${{ matrix.runtime }}
          fail-on-error: false

  unit_test_linux:
    needs: build_linux_native

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            runtime: linux-x64
            build_platform: x64
          - os: ubuntu-24.04
            runtime: linux-x64
            build_platform: x64
          - os: ubuntu-22.04-arm
            runtime: linux-arm64
            build_platform: ARM64
          - os: ubuntu-24.04-arm
            runtime: linux-arm64
            build_platform: ARM64

    runs-on: ${{ matrix.os }}

    env:
      DDS_ROOT: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}"
      ACE_ROOT: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers"
      TAO_ROOT: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/TAO"
      LD_LIBRARY_PATH: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/lib:${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/lib:."

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup dotnet 6.0
      shell: sh
      run: |
        curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --architecture '${{ matrix.build_platform }}' --channel 6.0
        echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
        echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc
      working-directory: ${{ github.workspace }}

    - name: Setup dotnet 7.0
      shell: sh
      run: |
        curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --architecture '${{ matrix.build_platform }}' --channel 7.0
        echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
        echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc
      working-directory: ${{ github.workspace }}

    - name: Setup dotnet 8.0
      shell: sh
      run: |
        curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --architecture '${{ matrix.build_platform }}' --channel 8.0
        echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
        echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc
      working-directory: ${{ github.workspace }}

    - name: Download ${{ matrix.runtime }} native
      uses: actions/download-artifact@v4
      with:
        name: opendds-${{ matrix.runtime }}-${{ github.run_number }}

    - name: Prepare ${{ matrix.runtime }} native
      shell: pwsh
      run: |
        Expand-Archive -Path "${{ github.workspace }}/opendds-native-${{ matrix.runtime }}.zip" -DestinationPath "."

        $sourceDir = "./opendds-native-${{ matrix.runtime }}/OpenDDS_${{ matrix.runtime }}/"
        $targetDir = "./ext/OpenDDS_${{ matrix.runtime }}"
        mkdir -p "$targetDir"
        
        rsync -a $sourceDir $targetDir
        ls -la $targetDir
        
        $sourceDir = "./opendds-native-${{ matrix.runtime }}/Native/build_${{ matrix.runtime }}/"
        $targetDir = "./Native/build_${{ matrix.runtime }}"
        mkdir -p "$targetDir"
        
        rsync -a $sourceDir $targetDir
        ls -la $targetDir
      working-directory: ${{ github.workspace }}

    - name: Dotnet restore
      shell: bash
      run: |
        dotnet restore ${{ github.workspace }}/OpenDDSharp.sln --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Examples/ConsoleDemo/ConsoleDemo.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/TestSupportProcess/TestSupportProcess.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/TestSupportProcess/TestSupportProcess.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/TestIdlCdr/TestIdlCdr.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/BenchmarkPerformance/BenchmarkPerformance.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp.BuildTasks project
      shell: bash
      run: dotnet build ${{ github.workspace }}/Sources/OpenDDSharp.BuildTasks/OpenDDSharp.BuildTasks.csproj --configuration Release
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp TestSupportProcess project
      shell: bash
      run: dotnet build ${{ github.workspace }}/Tests/TestSupportProcess/TestSupportProcess.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp UnitTest project
      shell: bash
      run: dotnet build ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained
      working-directory: ${{ github.workspace }}

    - name: Test OpenDDSharp
      shell: bash
      run: dotnet test ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --no-build --no-restore --results-directory ${{ github.workspace }}/TestResults --configuration Release --runtime ${{ matrix.runtime }} --collect:"XPlat Code Coverage" --settings ${{ github.workspace }}/Tests.runsettings --logger "console;verbosity=normal" --logger "trx;LogFilePrefix=test-results"
      working-directory: ${{ github.workspace }}

    - name: Test Report
      uses: dorny/test-reporter@v2
      if: success() || failure()
      with:
        name: "Test Report: ${{ matrix.os }}-${{ matrix.runtime }}"
        path: TestResults/test-results_*.trx
        reporter: dotnet-trx

    - name: Setup .NET Core 8.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x
        dotnet-quality: 'ga'

    - name: Merge coverage reports
      uses: danielpalme/ReportGenerator-GitHub-Action@v5
      with:
        reports: '**/*.cobertura.xml'
        targetdir: '${{ github.workspace }}/TestResults/reports.cobertura'
        reporttypes: 'HtmlInline;Cobertura'

    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ github.workspace }}/TestResults/reports.cobertura/Cobertura.xml
        parallel: true
        flag-name: coverage-${{ matrix.os }}-${{ matrix.runtime }}
        fail-on-error: false

  unit_test_macos:
    needs: build_macos_native

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            runtime: osx-x64
            build_platform: x64
          - os: macos-14
            runtime: osx-arm64
            build_platform: ARM64
# Issues with macos-15 found, waiting for official image review to fix it
#          - os: macos-15
#            runtime: osx-arm64
#            build_platform: ARM64

    runs-on: ${{ matrix.os }}

    env:
      DDS_ROOT: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}"
      ACE_ROOT: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers"
      TAO_ROOT: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/TAO"
      DYLD_LIBRARY_PATH: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/lib:${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/lib:."
      DYLD_FALLBACK_LIBRARY_PATH: "${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/lib:${{ github.workspace }}/ext/OpenDDS_${{ matrix.runtime }}/ACE_wrappers/lib:."

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dotnet 6.0
        shell: sh
        run: |
          curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --architecture '${{ matrix.build_platform }}' --channel 6.0
          echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
          echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc
        working-directory: ${{ github.workspace }}

      - name: Setup dotnet 7.0
        shell: sh
        run: |
          curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --architecture '${{ matrix.build_platform }}' --channel 7.0
          echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
          echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc
        working-directory: ${{ github.workspace }}

      - name: Setup dotnet 8.0
        shell: sh
        run: |
          curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --architecture '${{ matrix.build_platform }}' --channel 8.0
          echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
          echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc
        working-directory: ${{ github.workspace }}

      - name: Download ${{ matrix.runtime }} native artifact
        uses: actions/download-artifact@v4
        with:
          name: opendds-${{ matrix.runtime }}-${{ github.run_number }}

      - name: Prepare ${{ matrix.runtime }} native
        shell: pwsh
        run: |
          Expand-Archive -Path "${{ github.workspace }}/opendds-native-${{ matrix.runtime }}.zip" -DestinationPath "."
          
          $sourceDir = "./opendds-native-${{ matrix.runtime }}/OpenDDS_${{ matrix.runtime }}/"
          $targetDir = "./ext/OpenDDS_${{ matrix.runtime }}"
          mkdir -p "$targetDir"
          
          rsync -a $sourceDir $targetDir
          ls -la $targetDir
          
          $sourceDir = "./opendds-native-${{ matrix.runtime }}/Native/build_${{ matrix.runtime }}/"
          $targetDir = "./Native/build_${{ matrix.runtime }}"
          mkdir -p "$targetDir"
          
          rsync -a $sourceDir $targetDir
          ls -la $targetDir
        working-directory: ${{ github.workspace }}

      - name: Dotnet restore
        shell: bash
        run: |
          dotnet restore ${{ github.workspace }}/OpenDDSharp.sln --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Examples/ConsoleDemo/ConsoleDemo.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Tests/TestSupportProcess/TestSupportProcess.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Tests/TestSupportProcess/TestSupportProcess.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Tests/TestIdlCdr/TestIdlCdr.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
          dotnet restore ${{ github.workspace }}/Tests/BenchmarkPerformance/BenchmarkPerformance.csproj --packages "${{ github.workspace }}/packages" --no-cache --configfile ${{ github.workspace }}/nuget.config
        working-directory: ${{ github.workspace }}

      - name: Build OpenDDSharp.BuildTasks project
        shell: bash
        run: dotnet build ${{ github.workspace }}/Sources/OpenDDSharp.BuildTasks/OpenDDSharp.BuildTasks.csproj --configuration Release
        working-directory: ${{ github.workspace }}

      - name: Build OpenDDSharp TestSupportProcess project
        shell: bash
        run: dotnet build ${{ github.workspace }}/Tests/TestSupportProcess/TestSupportProcess.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained
        working-directory: ${{ github.workspace }}

      - name: Build OpenDDSharp UnitTest project
        shell: bash
        run: dotnet build ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained
        working-directory: ${{ github.workspace }}

      - name: Test OpenDDSharp
        shell: bash
        run: dotnet test ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --no-build --no-restore --results-directory ${{ github.workspace }}/TestResults --configuration Release --runtime ${{ matrix.runtime }} --collect:"XPlat Code Coverage" --settings ${{ github.workspace }}/Tests.runsettings --logger "console;verbosity=normal" --logger "trx;LogFilePrefix=test-results"
        working-directory: ${{ github.workspace }}

      - name: Test Report
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: "Test Report: ${{ matrix.os }}-${{ matrix.runtime }}"
          path: TestResults/test-results_*.trx
          reporter: dotnet-trx

      - name: Setup .NET Core 8.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
          dotnet-quality: 'ga'

      - name: Merge coverage reports
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: '**/*.cobertura.xml'
          targetdir: '${{ github.workspace }}/TestResults/reports.cobertura'
          reporttypes: 'HtmlInline;Cobertura'

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/TestResults/reports.cobertura/Cobertura.xml
          parallel: true
          flag-name: coverage-${{ matrix.os }}-${{ matrix.runtime }}
          fail-on-error: false

  publish_coveralls:
    runs-on: ubuntu-latest
    needs: [ unit_test_windows, unit_test_linux, unit_test_macos ]
    steps:
      - name: Publish coverage on Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
          carryforward: "coverage-windows-2019-win-x64,coverage-windows-2019-win-x86,coverage-windows-2022-win-x64,coverage-windows-2022-win-x86,coverage-windows-2025-win-x64,coverage-windows-2025-win-x86,coverage-ubuntu-22.04-linux-x64,coverage-ubuntu-22.04-arm-linux-arm64,coverage-ubuntu-24.04-linux-x64,coverage-ubuntu-24.04-arm-linux-arm64,coverage-macos-13-osx-x64,coverage-macos-14-osx-arm64"
          fail-on-error: false

  build_artifacts:
    runs-on: windows-latest

    needs: [build_windows_native, build_linux_native, build_macos_native]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup dotnet 8.0
      shell: pwsh
      run: |
        Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
        ./dotnet-install.ps1 -Architecture 'x64' -Channel 8.0;
        echo "PATH=$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3
      with:
        versionSpec: '5.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v3
      with:
        useConfigFile: true

    - name: Get branch names
      id: branch-name
      uses: tj-actions/branch-names@v8

    - name: Download OpenDDS Native win-x86
      uses: actions/download-artifact@v4
      with:
        name: opendds-win-x86-${{ github.run_number }}

    - name: Download OpenDDS Native win-x64
      uses: actions/download-artifact@v4
      with:
        name: opendds-win-x64-${{ github.run_number }}

    - name: Download OpenDDS Native linux-x64
      uses: actions/download-artifact@v4
      with:
        name: opendds-linux-x64-${{ github.run_number }}

    - name: Download OpenDDS Native linux-arm64
      uses: actions/download-artifact@v4
      with:
        name: opendds-linux-arm64-${{ github.run_number }}

    - name: Download OpenDDS Native osx-x64
      uses: actions/download-artifact@v4
      with:
        name: opendds-osx-x64-${{ github.run_number }}

    - name: Download OpenDDS Native osx-arm64
      uses: actions/download-artifact@v4
      with:
        name: opendds-osx-arm64-${{ github.run_number }}

    - name: Prepare OpenDDS Native
      shell: pwsh
      run: |
        Expand-Archive -Path "${{ github.workspace }}\opendds-native-win-x64.zip" -DestinationPath "."
        Expand-Archive -Path "${{ github.workspace }}\opendds-native-win-x86.zip" -DestinationPath "."
        Expand-Archive -Path "${{ github.workspace }}\opendds-native-linux-x64.zip" -DestinationPath "."
        Expand-Archive -Path "${{ github.workspace }}\opendds-native-linux-arm64.zip" -DestinationPath "."
        Expand-Archive -Path "${{ github.workspace }}\opendds-native-osx-x64.zip" -DestinationPath "."
        Expand-Archive -Path "${{ github.workspace }}\opendds-native-osx-arm64.zip" -DestinationPath "."
        
        XCOPY ".\opendds-native-win-x64\OpenDDS_x64\*" "${{ github.workspace }}\ext\OpenDDS_x64\" /D /S /Y /M
        XCOPY ".\opendds-native-win-x64\Native\*" "${{ github.workspace }}\Native\" /D /S /Y /M
        
        XCOPY ".\opendds-native-win-x86\OpenDDS_x86\*" "${{ github.workspace }}\ext\OpenDDS_x86\" /D /S /Y /M
        XCOPY ".\opendds-native-win-x86\Native\*" "${{ github.workspace }}\Native\" /D /S /Y /M
        
        XCOPY ".\opendds-native-linux-x64\OpenDDS_linux-x64\*" "${{ github.workspace }}\ext\OpenDDS_linux-x64\" /D /S /Y /M
        XCOPY ".\opendds-native-linux-x64\Native\*" "${{ github.workspace }}\Native\" /D /S /Y /M
        
        XCOPY ".\opendds-native-linux-arm64\OpenDDS_linux-arm64\*" "${{ github.workspace }}\ext\OpenDDS_linux-arm64\" /D /S /Y /M
        XCOPY ".\opendds-native-linux-arm64\Native\*" "${{ github.workspace }}\Native\" /D /S /Y /M
        
        XCOPY ".\opendds-native-osx-x64\OpenDDS_osx-x64\*" "${{ github.workspace }}\ext\OpenDDS_osx-x64\" /D /S /Y /M
        XCOPY ".\opendds-native-osx-x64\Native\*" "${{ github.workspace }}\Native\" /D /S /Y /M
        
        XCOPY ".\opendds-native-osx-arm64\OpenDDS_osx-arm64\*" "${{ github.workspace }}\ext\OpenDDS_osx-arm64\" /D /S /Y /M
        XCOPY ".\opendds-native-osx-arm64\Native\*" "${{ github.workspace }}\Native\" /D /S /Y /M

    - name: Set release version
      shell: pwsh
      run: ${{ github.workspace }}\Build\OpenDDSharp.Build.ps1 --target=SetVersion --MajorVersion=${{ env.GitVersion_Major }} --MinorVersion=${{ env.GitVersion_Minor }} --PatchVersion=${{ env.GitVersion_Patch }} --BuildNumber=${{ env.GitVersion_WeightedPreReleaseNumber }} --PreReleaseTag="${{ env.GitVersion_PreReleaseLabel }}" --BranchName="${{ steps.branch-name.outputs.current_branch }}"
      working-directory: ${{ github.workspace }}\Build

    - name: Dotnet restore
      shell: cmd
      run: |
        dotnet restore ${{ github.workspace }}/OpenDDSharp.sln --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Examples/ConsoleDemo/ConsoleDemo.csproj --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/TestSupportProcess/TestSupportProcess.csproj --no-cache --configfile ${{ github.workspace }}/nuget.config
        dotnet restore ${{ github.workspace }}/Tests/OpenDDSharp.UnitTest/OpenDDSharp.UnitTest.csproj --no-cache --configfile ${{ github.workspace }}/nuget.config
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp.BuildTasks project
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp.BuildTasks/OpenDDSharp.BuildTasks.csproj -property:Configuration=Release
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp x86
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp/OpenDDSharp.csproj -property:Configuration=Release -property:Platform=x86
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp x64
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp/OpenDDSharp.csproj -property:Configuration=Release -property:Platform=x64
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp ARM64
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp/OpenDDSharp.csproj -property:Configuration=Release -property:Platform=ARM64
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp AnyCPU
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp/OpenDDSharp.csproj -property:Configuration=Release -property:Platform=AnyCPU
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp.Marshaller x86
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp.Marshaller/OpenDDSharp.Marshaller.csproj -property:Configuration=Release -property:Platform=x86
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp.Marshaller x64
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp.Marshaller/OpenDDSharp.Marshaller.csproj -property:Configuration=Release -property:Platform=x64
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp.Marshaller ARM64
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp.Marshaller/OpenDDSharp.Marshaller.csproj -property:Configuration=Release -property:Platform=ARM64
      working-directory: ${{ github.workspace }}

    - name: Build OpenDDSharp.Marshaller AnyCPU
      shell: cmd
      run: dotnet msbuild -target:build ${{ github.workspace }}/Sources/OpenDDSharp.Marshaller/OpenDDSharp.Marshaller.csproj -property:Configuration=Release -property:Platform=AnyCPU
      working-directory: ${{ github.workspace }}

    - name: Create release packages
      shell: pwsh
      run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=Pack --MajorVersion=${{ env.GitVersion_Major }} --MinorVersion=${{ env.GitVersion_Minor }} --PatchVersion=${{ env.GitVersion_Patch }} --BuildNumber=${{ env.GitVersion_WeightedPreReleaseNumber }} --PreReleaseTag="${{ env.GitVersion_PreReleaseLabel }}" --BranchName="${{ steps.branch-name.outputs.current_branch }}"
      working-directory: ${{ github.workspace }}/Build

    - name: NuGet Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openddsharp-nuget-${{ github.run_number }}
        path:  ${{ github.workspace }}/Release/*.nupkg

  test_artifacts:
    needs: build_artifacts

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            runtime: win-x86
            build_platform: x86
            configuration: Release
          - os: windows-2019
            runtime: win-x64
            build_platform: x64
            configuration: Release
          - os: windows-2022
            runtime: win-x86
            build_platform: x86
            configuration: Release
          - os: windows-2022
            runtime: win-x64
            build_platform: x64
            configuration: Release
          - os: windows-2025
            runtime: win-x64
            build_platform: x64
            configuration: Release
          - os: windows-2025
            runtime: win-x86
            build_platform: x86
            configuration: Release
          - os: ubuntu-22.04
            runtime: linux-x64
            build_platform: x64
            configuration: Release
          - os: ubuntu-24.04
            runtime: linux-x64
            build_platform: x64
            configuration: Release
          - os: ubuntu-22.04-arm
            runtime: linux-arm64
            build_platform: ARM64
            configuration: Release
          - os: ubuntu-24.04-arm
            runtime: linux-arm64
            build_platform: ARM64
            configuration: Release
          - os: macos-13
            runtime: osx-x64
            build_platform: x64
            configuration: Release
          - os: macos-14
            runtime: osx-arm64
            build_platform: ARM64
            configuration: Release
          - os: windows-2019
            runtime: win-x86
            build_platform: x86
            configuration: Debug
          - os: windows-2019
            runtime: win-x64
            build_platform: x64
            configuration: Debug
          - os: windows-2022
            runtime: win-x86
            build_platform: x86
            configuration: Debug
          - os: windows-2022
            runtime: win-x64
            build_platform: x64
            configuration: Release
          - os: windows-2025
            runtime: win-x64
            build_platform: x64
            configuration: Debug
          - os: windows-2025
            runtime: win-x86
            build_platform: x86
            configuration: Debug
          - os: ubuntu-22.04
            runtime: linux-x64
            build_platform: x64
            configuration: Debug
          - os: ubuntu-24.04
            runtime: linux-x64
            build_platform: x64
            configuration: Debug
          - os: ubuntu-22.04-arm
            runtime: linux-arm64
            build_platform: ARM64
            configuration: Debug
          - os: ubuntu-24.04-arm
            runtime: linux-arm64
            build_platform: ARM64
            configuration: Debug
          - os: macos-13
            runtime: osx-x64
            build_platform: x64
            configuration: Debug
          - os: macos-14
            runtime: osx-arm64
            build_platform: ARM64
            configuration: Debug
# Issues with macos-15 found, waiting for official image review to fix it
#          - os: macos-15
#            runtime: osx-arm64
#            build_platform: ARM64
#            configuration: Release


    runs-on: ${{ matrix.os }}

    env:
      LD_LIBRARY_PATH: "."

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dotnet 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3
        with:
          versionSpec: '5.12.0'

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v3
        with:
          useConfigFile: true

      - name: Download OpenDDSharp NuGets
        uses: actions/download-artifact@v4
        with:
          name: openddsharp-nuget-${{ github.run_number }}
          path: ${{ github.workspace }}/nupkg

      - name: Test .NET development
        shell: pwsh
        run: |
          dotnet nuget add source "${{ github.workspace }}/nupkg" --name LocalVersion
          
          $version = "${{ env.GitVersion_Major }}.${{ env.GitVersion_Minor }}.${{ env.GitVersion_Patch }}"
          if (-Not ([string]::IsNullOrWhiteSpace("${{ env.GitVersion_PreReleaseLabel }}"))) {
            $version = "$version${{ env.GitVersion_PreReleaseLabelWithDash }}${{ env.GitVersion_WeightedPreReleaseNumber }}"
          }

          dotnet new --install "${{ github.workspace }}/nupkg/OpenDDSharp.Templates.$version.nupkg"
          New-Item -Path "." -Name "Test" -ItemType "directory"
          cd Test
          dotnet new openddsharp-idl-project
          Remove-Item ./IDL/Test.idl
          Copy-Item "${{ github.workspace }}/Tests/TestIdlCdr/IDL/Test.idl" -Destination "./IDL" -Force
          Copy-Item "${{ github.workspace }}/Tests/TestIdlCdr/IDL/TestInclude.idl" -Destination "./IDL" -Force
          dotnet restore Test.csproj --source https://api.nuget.org/v3/index.json --source ${{ github.workspace }}/nupkg/ --no-cache
          dotnet build Test.csproj --configuration ${{ matrix.configuration }} --runtime ${{ matrix.runtime }} --self-contained --no-restore
          dotnet clean Test.csproj
          cd ..
          New-Item -Path "." -Name "TestConsole" -ItemType "directory"
          cd TestConsole
          dotnet new openddsharp-console-app
          Remove-Item Program.cs
          Copy-Item "${{ github.workspace }}/Examples/ConsoleDemo/Program.cs" -Destination "."
          dotnet add TestConsole.csproj reference ../Test/Test.csproj
          dotnet restore TestConsole.csproj --source https://api.nuget.org/v3/index.json --source ${{ github.workspace }}/nupkg/ --no-cache
          dotnet build TestConsole.csproj --configuration ${{ matrix.configuration }} --runtime ${{ matrix.runtime }} --self-contained --no-restore
          
          $publishFolder = "${{ github.workspace }}/Publish/"
          $executable = "TestConsole"
          if ([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform([System.Runtime.InteropServices.OSPlatform]::Windows))
          {
              $publishFolder = "${{ github.workspace }}\Publish\"
              $executable += ".exe"
          }
          dotnet publish TestConsole.csproj --output "$publishFolder" --configuration ${{ matrix.configuration }} --runtime ${{ matrix.runtime }} --self-contained
          cd ${{ github.workspace }}

          $pinfo = New-Object System.Diagnostics.ProcessStartInfo
          $pinfo.FileName = $publishFolder + $executable
          $pinfo.RedirectStandardError = $true
          $pinfo.RedirectStandardOutput = $false
          $pinfo.UseShellExecute = $false
          $pinfo.WorkingDirectory = "$publishFolder"
          $pinfo.CreateNoWindow = $true
          
          $p = New-Object System.Diagnostics.Process
          $p.StartInfo = $pinfo
          $p.Start() | Out-Null
         
          $p.WaitForExit()

          $stderr = $p.StandardError.ReadToEnd()
          if ($stderr)
          {
              Write-Error "stderr: $stderr"
          }
          
          Write-Host "exit code: $($p.ExitCode)"
        working-directory: ${{ github.workspace }}

  publish_artifacts:
    needs: [test_artifacts, publish_coveralls]
    if: ${{ github.event.inputs.publish == 'true' }}
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download OpenDDSharp NuGets
        uses: actions/download-artifact@v4
        with:
          name: openddsharp-nuget-${{ github.run_number }}
          path: ${{ github.workspace }}/Release

      - name: Get branch names
        id: branch-name
        uses: tj-actions/branch-names@v8

      - name: Publish NuGet packages
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        shell: pwsh
        run: ${{ github.workspace }}/Build/OpenDDSharp.Build.ps1 --target=Publish --NugetApiKey="$env:NUGET_API_KEY" --BranchName=${{ steps.branch-name.outputs.current_branch }}
        working-directory: ${{ github.workspace }}/Build
