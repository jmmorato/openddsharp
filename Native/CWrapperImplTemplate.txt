void <%SCOPED_METHOD%>Wrapper_release(<%SCOPED_METHOD%>Wrapper* obj)
{
    obj->release();
}

<%SCOPED%>TypeSupport_ptr <%SCOPED_METHOD%>TypeSupport_new()
{
    return new <%SCOPED%>TypeSupportImpl();
}

char* <%SCOPED_METHOD%>TypeSupport_GetTypeName(<%SCOPED%>TypeSupport_ptr native)
{
    return native->get_type_name();
}

int <%SCOPED_METHOD%>TypeSupport_RegisterType(<%SCOPED%>TypeSupport_ptr native, ::DDS::DomainParticipant_ptr dp, const char* typeName)
{
    return native->register_type(dp, typeName);
}

int <%SCOPED_METHOD%>TypeSupport_UnregisterType(<%SCOPED%>TypeSupport_ptr native, ::DDS::DomainParticipant_ptr dp, const char* typeName)
{
    return native->unregister_type(dp, typeName);
}

<%SCOPED%>DataWriter_ptr <%SCOPED_METHOD%>DataWriter_Narrow(DDS::DataWriter_ptr dw)
{
    return <%SCOPED%>DataWriter::_narrow(dw);
}

int <%SCOPED_METHOD%>DataWriter_Write(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper data, int handle)
{
    <%SCOPED%> nativeData = data.to_native();

    return dw->write(nativeData, handle);
}

int <%SCOPED_METHOD%>DataWriter_Write_Json(<%SCOPED%>DataWriter_ptr dw, const char* json_data, int handle)
{
    //<%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    <%SCOPED_METHOD%>_to_file(json_data);
    <%SCOPED%>TypeSupport_var ts = new <%SCOPED%>TypeSupportImpl;
    OpenDDS::DCPS::RepresentationFormat_var format = ts->make_format(OpenDDS::DCPS::JSON_DATA_REPRESENTATION);    
    <%SCOPED%>_var samplev;
    ::DDS::ReturnCode_t ret = ts->decode_from_string(json_data, samplev, format);
    if (ret != ::DDS::RETCODE_OK)
    {
        return ret;
    }
    const <%SCOPED%> sample = samplev.in();

    ret = dw->write(sample, handle);
    
    return ret;
}

int <%SCOPED_METHOD%>DataWriter_WriteWithTimestamp(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper data, int handle, ::DDS::Time_t time)
{
    <%SCOPED%> nativeData = data.to_native();

    return dw->write_w_timestamp(nativeData, handle, time);
}

int <%SCOPED_METHOD%>DataWriter_RegisterInstance(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper instance)
{
    <%SCOPED%> nativeData = instance.to_native();

    return dw->register_instance(nativeData);
}

int <%SCOPED_METHOD%>DataWriter_RegisterInstanceTimestamp(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper instance, ::DDS::Time_t time)
{
    <%SCOPED%> nativeData = instance.to_native();

    return dw->register_instance_w_timestamp(nativeData, time);
}

int <%SCOPED_METHOD%>DataWriter_UnregisterInstance(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper instance, ::DDS::InstanceHandle_t handle)
{
    <%SCOPED%> nativeData = instance.to_native();

    return dw->unregister_instance(nativeData, handle);
}

int <%SCOPED_METHOD%>DataWriter_UnregisterInstanceTimestamp(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper instance, ::DDS::InstanceHandle_t handle, ::DDS::Time_t time)
{
    <%SCOPED%> nativeData = instance.to_native();

    return dw->unregister_instance_w_timestamp(nativeData, handle, time);
}

int <%SCOPED_METHOD%>DataWriter_LookupInstance(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper instance)
{
    <%SCOPED%> nativeData = instance.to_native();

    return dw->lookup_instance(nativeData);
}

int <%SCOPED_METHOD%>DataWriter_Dispose(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper data, int handle)
{
    <%SCOPED%> nativeData = data.to_native();

    return dw->dispose(nativeData, handle);
}

int <%SCOPED_METHOD%>DataWriter_DisposeTimestamp(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper data, int handle, ::DDS::Time_t time)
{
    <%SCOPED%> nativeData = data.to_native();

    return dw->dispose_w_timestamp(nativeData, handle, time);
}

int <%SCOPED_METHOD%>DataWriter_GetKeyValue(<%SCOPED%>DataWriter_ptr dw, <%SCOPED_METHOD%>Wrapper* data, int handle)
{
    <%SCOPED%> nativeData = data->to_native();

    ::DDS::ReturnCode_t ret = dw->get_key_value(nativeData, handle);

    if (ret == ::DDS::RETCODE_OK)
    {
        data->from_native(nativeData);
    }

    return ret;
}

<%SCOPED%>DataReader_ptr <%SCOPED_METHOD%>DataReader_Narrow(DDS::DataReader_ptr dr)
{
    return <%SCOPED%>DataReader::_narrow(dr);
}

int <%SCOPED_METHOD%>DataReader_ReadNextSample(<%SCOPED%>DataReader_ptr dr, <%SCOPED_METHOD%>Wrapper* data, ::DDS::SampleInfo* sampleInfo)
{
    <%SCOPED%> nativeData = data->to_native();
    ::DDS::ReturnCode_t ret = dr->read_next_sample(nativeData, *sampleInfo);

    if (ret == ::DDS::RETCODE_OK)
    {
        data->from_native(nativeData);
    }
    
    return (int)ret;
}

int <%SCOPED_METHOD%>DataReader_ReadNextSample_Json(<%SCOPED%>DataReader_ptr dr, char* & json_data, ::DDS::SampleInfo* sampleInfo)
{
    <%SCOPED%> sample;
    ::DDS::ReturnCode_t ret = dr->read_next_sample(sample, *sampleInfo);

    if (ret == ::DDS::RETCODE_OK)
    {
        <%SCOPED%>TypeSupport_var ts = new <%SCOPED%>TypeSupportImpl;
        OpenDDS::DCPS::RepresentationFormat_var format = ts->make_format(OpenDDS::DCPS::JSON_DATA_REPRESENTATION);
        CORBA::String_var buffer;
        ts->encode_to_string(sample, buffer, format);
        json_data = CORBA::string_dup(buffer);
    }
    
    return (int)ret;
}

int <%SCOPED_METHOD%>DataReader_TakeNextSample(<%SCOPED%>DataReader_ptr dr, <%SCOPED_METHOD%>Wrapper* data, ::DDS::SampleInfo* sampleInfo)
{
    <%SCOPED%> nativeData = data->to_native();;

    ::DDS::ReturnCode_t ret = dr->take_next_sample(nativeData, *sampleInfo);
    if (ret == ::DDS::RETCODE_OK)
    {        
        data->from_native(nativeData);
    }

    return (int)ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_Read(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;

    ::DDS::ReturnCode_t ret = dr->read(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_ReadWithCondition(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;

    ::DDS::ReturnCode_t ret = dr->read_w_condition(received_data, info_seq, maxSamples, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_Take(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;    
    ::DDS::ReturnCode_t ret = dr->take(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_TakeWithCondition(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;

    ::DDS::ReturnCode_t ret = dr->take_w_condition(received_data, info_seq, maxSamples, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

int <%SCOPED_METHOD%>DataReader_LookupInstance(<%SCOPED%>DataReader_ptr dr, <%SCOPED_METHOD%>Wrapper instance)
{
    <%SCOPED%> nativeData = instance.to_native();

    return dr->lookup_instance(nativeData);
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_ReadInstance(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;    
    ::DDS::ReturnCode_t ret = dr->read_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_ReadInstanceWithCondition(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;

    ::DDS::ReturnCode_t ret = dr->read_instance_w_condition(received_data, info_seq, maxSamples, handle, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_TakeInstance(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;    
    ::DDS::ReturnCode_t ret = dr->take_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_TakeInstanceWithCondition(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;

    ::DDS::ReturnCode_t ret = dr->take_instance_w_condition(received_data, info_seq, maxSamples, handle, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_ReadNextInstance(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;    
    ::DDS::ReturnCode_t ret = dr->read_next_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_ReadNextInstanceWithCondition(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;    
    ::DDS::ReturnCode_t ret = dr->read_next_instance_w_condition(received_data, info_seq, maxSamples, handle, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_TakeNextInstance(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;    
    ::DDS::ReturnCode_t ret = dr->take_next_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_TakeNextInstanceWithCondition(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;    
    ::DDS::ReturnCode_t ret = dr->take_next_instance_w_condition(received_data, info_seq, maxSamples, handle, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<<%SCOPED_METHOD%>Wrapper> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            <%SCOPED_METHOD%>Wrapper aux;
            aux.from_native(received_data[i]);
            seq[i] = aux;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

int <%SCOPED_METHOD%>DataReader_GetKeyValue(<%SCOPED%>DataReader_ptr dr, <%SCOPED_METHOD%>Wrapper* data, int handle)
{
    <%SCOPED%> nativeData = data->to_native();

    ::DDS::ReturnCode_t ret = dr->get_key_value(nativeData, handle);

    if (ret == ::DDS::RETCODE_OK)
    {
        data->from_native(nativeData);
    }

    return ret;
}
