
<%SCOPED%>TypeSupport_ptr <%SCOPED_METHOD%>TypeSupport_new()
{
    return new <%SCOPED%>TypeSupportImpl();
}

char* <%SCOPED_METHOD%>TypeSupport_GetTypeName(<%SCOPED%>TypeSupport_ptr native)
{
    return native->get_type_name();
}

int <%SCOPED_METHOD%>TypeSupport_RegisterType(<%SCOPED%>TypeSupport_ptr native, ::DDS::DomainParticipant_ptr dp, const char* typeName)
{
    return native->register_type(dp, typeName);
}

int <%SCOPED_METHOD%>TypeSupport_UnregisterType(<%SCOPED%>TypeSupport_ptr native, ::DDS::DomainParticipant_ptr dp, const char* typeName)
{
    return native->unregister_type(dp, typeName);
}

<%SCOPED%>DataWriter_ptr <%SCOPED_METHOD%>DataWriter_Narrow(DDS::DataWriter_ptr dw)
{
    return <%SCOPED%>DataWriter::_narrow(dw);
}

int <%SCOPED_METHOD%>DataWriter_Write_Json(<%SCOPED%>DataWriter_ptr dw, const char* json_data, int handle)
{
    <%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    if (samplev == NULL)
    {
        return ::DDS::RETCODE_ERROR;
    }
    <%SCOPED%> sample = samplev.in();

    ::DDS::ReturnCode_t ret = dw->write(sample, handle);

    return ret;
}

int <%SCOPED_METHOD%>DataWriter_Write_Cdr(<%SCOPED%>DataWriter_ptr dw, const char* cdr_data, size_t size, int handle)
{
    <%SCOPED%> sample = <%SCOPED_METHOD%>_deserialize_from_bytes(cdr_data, size);

    ::DDS::ReturnCode_t ret = dw->write(sample, handle);

    return ret;
}

int <%SCOPED_METHOD%>DataWriter_WriteWithTimestamp_Json(<%SCOPED%>DataWriter_ptr dw, const char* json_data, int handle, ::DDS::Time_t time)
{
    <%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    if (samplev == NULL)
    {
        return ::DDS::RETCODE_ERROR;
    }
    <%SCOPED%> sample = samplev.in();

    return dw->write_w_timestamp(sample, handle, time);
}

int <%SCOPED_METHOD%>DataWriter_RegisterInstance_Json(<%SCOPED%>DataWriter_ptr dw, const char* json_data)
{
    <%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    if (samplev == NULL)
    {
        return ::DDS::RETCODE_ERROR;
    }
    <%SCOPED%> sample = samplev.in();

    return dw->register_instance(sample);
}

int <%SCOPED_METHOD%>DataWriter_RegisterInstance_Cdr(<%SCOPED%>DataWriter_ptr dw, const char* cdr_data, size_t size)
{
    <%SCOPED%> sample = <%SCOPED_METHOD%>_deserialize_from_bytes(cdr_data, size);

    return dw->register_instance(sample);
}

int <%SCOPED_METHOD%>DataWriter_RegisterInstanceTimestamp_Json(<%SCOPED%>DataWriter_ptr dw, const char* json_data, ::DDS::Time_t time)
{
    <%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    if (samplev == NULL)
    {
        return ::DDS::RETCODE_ERROR;
    }
    <%SCOPED%> sample = samplev.in();

    return dw->register_instance_w_timestamp(sample, time);
}

int <%SCOPED_METHOD%>DataWriter_UnregisterInstance_Json(<%SCOPED%>DataWriter_ptr dw, const char* json_data, ::DDS::InstanceHandle_t handle)
{
    <%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    if (samplev == NULL)
    {
        return ::DDS::RETCODE_ERROR;
    }
    <%SCOPED%> sample = samplev.in();

    return dw->unregister_instance(sample, handle);
}

int <%SCOPED_METHOD%>DataWriter_UnregisterInstanceTimestamp_Json(<%SCOPED%>DataWriter_ptr dw, const char* json_data, ::DDS::InstanceHandle_t handle, ::DDS::Time_t time)
{
    <%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    if (samplev == NULL)
    {
        return ::DDS::RETCODE_ERROR;
    }
    <%SCOPED%> sample = samplev.in();

    return dw->unregister_instance_w_timestamp(sample, handle, time);
}

int <%SCOPED_METHOD%>DataWriter_LookupInstance_Json(<%SCOPED%>DataWriter_ptr dw, const char* json_data)
{
    <%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    if (samplev == NULL)
    {
        return ::DDS::RETCODE_ERROR;
    }
    <%SCOPED%> sample = samplev.in();

    return dw->lookup_instance(sample);
}

int <%SCOPED_METHOD%>DataWriter_Dispose_Json(<%SCOPED%>DataWriter_ptr dw, const char* json_data, int handle)
{
    <%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    if (samplev == NULL)
    {
        return ::DDS::RETCODE_ERROR;
    }
    <%SCOPED%> sample = samplev.in();

    return dw->dispose(sample, handle);
}

int <%SCOPED_METHOD%>DataWriter_DisposeTimestamp_Json(<%SCOPED%>DataWriter_ptr dw, const char* json_data, int handle, ::DDS::Time_t time)
{
    <%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    if (samplev == NULL)
    {
        return ::DDS::RETCODE_ERROR;
    }
    <%SCOPED%> sample = samplev.in();

    return dw->dispose_w_timestamp(sample, handle, time);
}

int <%SCOPED_METHOD%>DataWriter_GetKeyValue_Json(<%SCOPED%>DataWriter_ptr dw, char* & json_data, int handle)
{
    <%SCOPED%> sample_key;
    ::DDS::ReturnCode_t ret = dw->get_key_value(sample_key, handle);

    if (ret == ::DDS::RETCODE_OK)
    {
        <%SCOPED%> sample = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
        <%SCOPED_METHOD%>_CopyKeys(&sample_key, &sample);
        json_data = <%SCOPED_METHOD%>_EncodeJsonSample(sample);
    }

    return ret;
}

<%SCOPED%>DataReader_ptr <%SCOPED_METHOD%>DataReader_Narrow(DDS::DataReader_ptr dr)
{
    return <%SCOPED%>DataReader::_narrow(dr);
}

int <%SCOPED_METHOD%>DataReader_ReadNextSample_Json(<%SCOPED%>DataReader_ptr dr, char* & json_data, ::DDS::SampleInfo* sampleInfo)
{
    <%SCOPED%> sample;
    ::DDS::ReturnCode_t ret = dr->read_next_sample(sample, *sampleInfo);

    if (ret == ::DDS::RETCODE_OK)
    {
        json_data = <%SCOPED_METHOD%>_EncodeJsonSample(sample);
    }

    return (int)ret;
}

int <%SCOPED_METHOD%>DataReader_ReadNextSample_Cdr(<%SCOPED%>DataReader_ptr dr, char* & cdr_data, size_t & size, ::DDS::SampleInfo* sampleInfo)
{
    <%SCOPED%> sample;
    ::DDS::ReturnCode_t ret = dr->read_next_sample(sample, *sampleInfo);

    if (ret == ::DDS::RETCODE_OK)
    {
        <%SCOPED_METHOD%>_serialize_to_bytes(sample, cdr_data, size);
    }

    return (int)ret;
}

int <%SCOPED_METHOD%>DataReader_TakeNextSample_Json(<%SCOPED%>DataReader_ptr dr, char* & json_data, ::DDS::SampleInfo* sampleInfo)
{
    <%SCOPED%> sample;
    ::DDS::ReturnCode_t ret = dr->take_next_sample(sample, *sampleInfo);

    if (ret == ::DDS::RETCODE_OK)
    {
        json_data = <%SCOPED_METHOD%>_EncodeJsonSample(sample);
    }

    return (int)ret;
}

int <%SCOPED_METHOD%>DataReader_TakeNextSample_Cdr(<%SCOPED%>DataReader_ptr dr, char* & cdr_data, size_t & size, ::DDS::SampleInfo* sampleInfo)
{
    <%SCOPED%> sample;
    ::DDS::ReturnCode_t ret = dr->take_next_sample(sample, *sampleInfo);

    if (ret == ::DDS::RETCODE_OK)
    {
        <%SCOPED_METHOD%>_serialize_to_bytes(sample, cdr_data, size);
    }

    return (int)ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_Read_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;

    ::DDS::ReturnCode_t ret = dr->read(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_ReadWithCondition_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;

    ::DDS::ReturnCode_t ret = dr->read_w_condition(received_data, info_seq, maxSamples, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_Take_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;
    ::DDS::ReturnCode_t ret = dr->take(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_TakeWithCondition_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;

    ::DDS::ReturnCode_t ret = dr->take_w_condition(received_data, info_seq, maxSamples, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

int <%SCOPED_METHOD%>DataReader_LookupInstance_Json(<%SCOPED%>DataReader_ptr dr, const char* json_data)
{
    <%SCOPED%>_var samplev = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
    if (samplev == NULL)
    {
        return ::DDS::RETCODE_ERROR;
    }
    <%SCOPED%> sample = samplev.in();

    return dr->lookup_instance(sample);
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_ReadInstance_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;
    ::DDS::ReturnCode_t ret = dr->read_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_ReadInstanceWithCondition_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;

    ::DDS::ReturnCode_t ret = dr->read_instance_w_condition(received_data, info_seq, maxSamples, handle, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_TakeInstance_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;
    ::DDS::ReturnCode_t ret = dr->take_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_TakeInstanceWithCondition_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;

    ::DDS::ReturnCode_t ret = dr->take_instance_w_condition(received_data, info_seq, maxSamples, handle, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_ReadNextInstance_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;
    ::DDS::ReturnCode_t ret = dr->read_next_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_ReadNextInstanceWithCondition_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;
    ::DDS::ReturnCode_t ret = dr->read_next_instance_w_condition(received_data, info_seq, maxSamples, handle, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_TakeNextInstance_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::SampleStateMask sampleStates, ::DDS::ViewStateMask viewStates, ::DDS::InstanceStateMask instanceStates)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;
    ::DDS::ReturnCode_t ret = dr->take_next_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

::DDS::ReturnCode_t <%SCOPED_METHOD%>DataReader_TakeNextInstanceWithCondition_Json(<%SCOPED%>DataReader_ptr dr, void*& receivedData, void*& receivedInfo, ::DDS::InstanceHandle_t handle, CORBA::Long maxSamples, ::DDS::ReadCondition_ptr condition)
{
    <%SCOPED%>Seq received_data;
    ::DDS::SampleInfoSeq info_seq;
    ::DDS::ReturnCode_t ret = dr->take_next_instance_w_condition(received_data, info_seq, maxSamples, handle, condition);
    if (ret == ::DDS::RETCODE_OK)
    {
        TAO::unbounded_value_sequence<char*> seq(received_data.length());
        seq.length(received_data.length());
        for (unsigned int i = 0; i < received_data.length(); i++) {
            seq[i] = <%SCOPED_METHOD%>_EncodeJsonSample(received_data[i]);;
        }

        marshal::unbounded_sequence_to_ptr(seq, receivedData);
        marshal::unbounded_sequence_to_ptr(info_seq, receivedInfo);
    }

    dr->return_loan(received_data, info_seq);

    return ret;
}

int <%SCOPED_METHOD%>DataReader_GetKeyValue_Json(<%SCOPED%>DataReader_ptr dr, char* & json_data, int handle)
{
    <%SCOPED%> sample_key;
    ::DDS::ReturnCode_t ret = dr->get_key_value(sample_key, handle);

    if (ret == ::DDS::RETCODE_OK)
    {
        <%SCOPED%> sample = <%SCOPED_METHOD%>_DecodeJsonSample(json_data);
        <%SCOPED_METHOD%>_CopyKeys(&sample_key, &sample);
        json_data = <%SCOPED_METHOD%>_EncodeJsonSample(sample);
    }

    return ret;
}
