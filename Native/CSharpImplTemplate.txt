	public class <%TYPE%>TypeSupport
    {
        #region Field
        private IntPtr _native;
        #endregion

        #region Constructors
        public <%TYPE%>TypeSupport()
        {
            _native = <%TYPE%>TypeSupportNew();
        }
        #endregion

        #region Methods
        public string GetTypeName()
        {
            return Marshal.PtrToStringAnsi(GetTypeName(_native));
        }

        public ReturnCode RegisterType(DomainParticipant dp, string typeName)
        {
            return (ReturnCode)RegisterType(_native, dp.ToNative(), typeName);
        }

        public ReturnCode UnregisterType(DomainParticipant dp, string typeName)
        {            
            return (ReturnCode)UnregisterType(_native, dp.ToNative(), typeName);
        }
        #endregion

        #region PInvoke
        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>TypeSupport_new", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr <%TYPE%>TypeSupportNew();

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>TypeSupport_GetTypeName", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Auto, BestFitMapping = false, ThrowOnUnmappableChar = true)]
        private static extern IntPtr GetTypeName(IntPtr native);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>TypeSupport_RegisterType", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi, BestFitMapping = false, ThrowOnUnmappableChar = true)]
        private static extern int RegisterType(IntPtr native, IntPtr dp, string typeName);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>TypeSupport_UnregisterType", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi, BestFitMapping = false, ThrowOnUnmappableChar = true)]
        private static extern int UnregisterType(IntPtr native, IntPtr dp, string typeName);
        #endregion
    }

    public class <%TYPE%>DataWriter : DataWriter
    {
        #region Fields
        private readonly IntPtr _native;
        #endregion

        #region Constructors
        public <%TYPE%>DataWriter(DataWriter dw) : base(dw.ToNative())
        {
			IntPtr ptr = base.ToNative();
            _native = Narrow(ptr);
        }
        #endregion

        #region Methods
        public InstanceHandle RegisterInstance(<%TYPE%> instance)
        {
            InstanceHandle ret = InstanceHandle.HandleNil;

            List<IntPtr> toRelease = new List<IntPtr>();
            <%TYPE%>Wrapper wrapper = instance.ToNative(toRelease);
            ret = RegisterInstance(_native, wrapper);

            return ret;
        }

        public InstanceHandle RegisterInstance(<%TYPE%> instance, Timestamp timestamp)
        {
            InstanceHandle ret = InstanceHandle.HandleNil;

            List<IntPtr> toRelease = new List<IntPtr>();
            <%TYPE%>Wrapper wrapper = instance.ToNative(toRelease);
            ret = RegisterInstanceTimestamp(_native, wrapper, timestamp);

            return ret;
        }

        public ReturnCode UnregisterInstance(<%TYPE%> data)
        {
            List<IntPtr> toRelease = new List<IntPtr>();
            <%SCOPED%>Wrapper native = data.ToNative(toRelease);

            InstanceHandle handle = LookupInstance(data);
            if (handle == InstanceHandle.HandleNil) 
            {
                return ReturnCode.PreconditionNotMet;
            }

	        return (ReturnCode)UnregisterInstance(_native, native, handle);
        }

		public ReturnCode UnregisterInstance(<%TYPE%> data, InstanceHandle handle)
        {
            List<IntPtr> toRelease = new List<IntPtr>();
            <%SCOPED%>Wrapper native = data.ToNative(toRelease);

            return (ReturnCode)UnregisterInstance(_native, native, handle);
        }

        public ReturnCode UnregisterInstance(<%TYPE%> data, InstanceHandle handle, Timestamp timestamp)
        {
            List<IntPtr> toRelease = new List<IntPtr>();
            <%SCOPED%>Wrapper native = data.ToNative(toRelease);

            return (ReturnCode)UnregisterInstanceTimestamp(_native, native, handle, timestamp);
        }

        public ReturnCode Write(<%TYPE%> data)
        {
            return Write(data, InstanceHandle.HandleNil);
        }

        public ReturnCode Write(<%TYPE%> data, InstanceHandle handle)
        {
            if (data == null)
            {
                return ReturnCode.BadParameter;
            }

            ReturnCode ret = ReturnCode.Error;
            List<IntPtr> toRelease = new List<IntPtr>();

            //<%TYPE%>Wrapper wrapper = data.ToNative(toRelease);
            string wrapper = JsonSerializer.Serialize(data);
            ret = (ReturnCode)Write(_native, wrapper, handle);

            // Always free the unmanaged memory.
            foreach (IntPtr ptr in toRelease)
            {
                Marshal.FreeHGlobal(ptr);
            }

            return ret;
        }

        public ReturnCode Write(<%TYPE%> data, InstanceHandle handle, Timestamp timestamp)
        {
            if (data == null)
            {
                return ReturnCode.BadParameter;
            }

            ReturnCode ret = ReturnCode.Error;
            List<IntPtr> toRelease = new List<IntPtr>();

            <%TYPE%>Wrapper wrapper = data.ToNative(toRelease);
            ret = (ReturnCode)WriteWithTimestamp(_native, wrapper, handle, timestamp);

            // Always free the unmanaged memory.
            foreach(IntPtr ptr in toRelease)
            {
                Marshal.FreeHGlobal(ptr);
            }

            return ret;
        }

        public ReturnCode Dispose(<%TYPE%> data)
        {
            return Dispose(data, InstanceHandle.HandleNil);
        }

		public ReturnCode Dispose(<%TYPE%> data, InstanceHandle handle)
        {
            if (data == null)
            {
                return ReturnCode.BadParameter;
            }

            ReturnCode ret = ReturnCode.Error;
            List<IntPtr> toRelease = new List<IntPtr>();

            ret = (ReturnCode)Dispose(_native, data.ToNative(toRelease), handle);

            // Always free the unmanaged memory.
            foreach (IntPtr ptr in toRelease)
            {
                Marshal.FreeHGlobal(ptr);
            }

            return ret;
        }

        public ReturnCode Dispose(<%TYPE%> data, InstanceHandle handle, Timestamp timestamp)
        {
            if (data == null)
            {
                return ReturnCode.BadParameter;
            }

            ReturnCode ret = ReturnCode.Error;
            List<IntPtr> toRelease = new List<IntPtr>();

            ret = (ReturnCode)DisposeTimestamp(_native, data.ToNative(toRelease), handle, timestamp);

            // Always free the unmanaged memory.
            foreach(IntPtr ptr in toRelease)
            {
                Marshal.FreeHGlobal(ptr);
            }

            return ret;
        }

        public ReturnCode GetKeyValue(<%TYPE%> data, InstanceHandle handle)
        {
            if (data == null)
            {
                return ReturnCode.BadParameter;
            }

            if (handle == InstanceHandle.HandleNil)
            {
                return ReturnCode.BadParameter;
            }

            ReturnCode ret = ReturnCode.Error;
            <%TYPE%>Wrapper aux = new <%TYPE%>Wrapper();

            ret = (ReturnCode)GetKeyValue(_native, ref aux, handle);

            if (ret == ReturnCode.Ok)
            {
                data.FromNative(aux);
            }

            return ret;
        }

        public InstanceHandle LookupInstance(<%TYPE%> instance)
        {
            InstanceHandle ret = InstanceHandle.HandleNil;
            List<IntPtr> toRelease = new List<IntPtr>();

            ret = LookupInstance(_native, instance.ToNative(toRelease));

            // Always free the unmanaged memory.
            foreach (IntPtr ptr in toRelease)
            {
                Marshal.FreeHGlobal(ptr);
            }

            return ret;
        }
        #endregion

        #region PInvoke
        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_Narrow", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr Narrow(IntPtr dw);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_Write", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Write(IntPtr dw, [MarshalAs(UnmanagedType.Struct), In] <%TYPE%>Wrapper data, int handle);
        
        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_Write_Json", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi, BestFitMapping = false, ThrowOnUnmappableChar = true)]
        private static extern int Write(IntPtr dw, [MarshalAs(UnmanagedType.LPStr)]string jsonData, int handle);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_WriteWithTimestamp", CallingConvention = CallingConvention.Cdecl)]
        private static extern int WriteWithTimestamp(IntPtr dw, [MarshalAs(UnmanagedType.Struct), In] <%TYPE%>Wrapper data, int handle, [MarshalAs(UnmanagedType.Struct), In] Timestamp timestamp);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_RegisterInstance", CallingConvention = CallingConvention.Cdecl)]
        private static extern int RegisterInstance(IntPtr dw, <%TYPE%>Wrapper instance);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_RegisterInstanceTimestamp", CallingConvention = CallingConvention.Cdecl)]
        private static extern int RegisterInstanceTimestamp(IntPtr dw, <%TYPE%>Wrapper instance, [MarshalAs(UnmanagedType.Struct), In] Timestamp timestamp);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_UnregisterInstance", CallingConvention = CallingConvention.Cdecl)]
        private static extern int UnregisterInstance(IntPtr dw, <%TYPE%>Wrapper instance, int handle);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_UnregisterInstanceTimestamp", CallingConvention = CallingConvention.Cdecl)]
        private static extern int UnregisterInstanceTimestamp(IntPtr dw, <%TYPE%>Wrapper instance, int handle, [MarshalAs(UnmanagedType.Struct), In] Timestamp timestamp);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_LookupInstance", CallingConvention = CallingConvention.Cdecl)]
        private static extern int LookupInstance(IntPtr dw, <%TYPE%>Wrapper instance);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_Dispose", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Dispose(IntPtr dw, [MarshalAs(UnmanagedType.Struct), In] <%TYPE%>Wrapper data, int handle);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_DisposeTimestamp", CallingConvention = CallingConvention.Cdecl)]
        private static extern int DisposeTimestamp(IntPtr dw, [MarshalAs(UnmanagedType.Struct), In] <%TYPE%>Wrapper data, int handle, [MarshalAs(UnmanagedType.Struct), In] Timestamp timestamp);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataWriter_GetKeyValue", CallingConvention = CallingConvention.Cdecl)]
        private static extern int GetKeyValue(IntPtr dw, [MarshalAs(UnmanagedType.Struct), In, Out] ref <%TYPE%>Wrapper data, int handle);
        #endregion
    }

    public class <%TYPE%>DataReader : DataReader
    {
        #region Fields
        private readonly IntPtr _native;
        #endregion

        #region Constructors
        public <%TYPE%>DataReader(DataReader dr) : base(dr.ToNative())
        {
			IntPtr ptr = base.ToNative();
            _native = Narrow(ptr);
        }
        #endregion

        #region Methods
        public ReturnCode Read(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo)
        {
            return Read(receivedData, receivedInfo, ResourceLimitsQosPolicy.LengthUnlimited, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

        public ReturnCode Read(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, int maxSamples)
        {
            return Read(receivedData, receivedInfo, maxSamples, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

        public ReturnCode Read(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, int maxSamples, ReadCondition condition)
        {
            if (condition == null)
            {
                return ReturnCode.BadParameter;
            }

            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)ReadWithCondition(_native, ref rd, ref ri, maxSamples, condition.ToNative());
            
            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode Read(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, int maxSamples, SampleStateMask sampleStates, ViewStateMask viewStates, InstanceStateMask instanceStates)
        {
            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)Read(_native, ref rd, ref ri, maxSamples, sampleStates, viewStates, instanceStates);            

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode Take(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo)
        {
            return Take(receivedData, receivedInfo, ResourceLimitsQosPolicy.LengthUnlimited, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

        public ReturnCode Take(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, int maxSamples)
        {
            return Take(receivedData, receivedInfo, maxSamples, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

        public ReturnCode Take(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, int maxSamples, ReadCondition condition)
        {
            if (condition == null)
            {
                return ReturnCode.BadParameter;
            }

            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)TakeWithCondition(_native, ref rd, ref ri, maxSamples, condition.ToNative());            

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode Take(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, int maxSamples, SampleStateMask sampleStates, ViewStateMask viewStates, InstanceStateMask instanceStates)
        {
            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)Take(_native, ref rd, ref ri, maxSamples, sampleStates, viewStates, instanceStates);

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode ReadInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle handle)
        {
            return ReadInstance(receivedData, receivedInfo, handle, ResourceLimitsQosPolicy.LengthUnlimited, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

		public ReturnCode ReadInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle handle, int maxSamples)
        {
            return ReadInstance(receivedData, receivedInfo, handle, maxSamples, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

		public ReturnCode ReadInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle handle, int maxSamples, ReadCondition condition)
        {
            if (condition == null)
            {
                return ReturnCode.BadParameter;
            }

            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)ReadInstanceWithCondition(_native, ref rd, ref ri, (int)handle, maxSamples, condition.ToNative());

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode ReadInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle handle, int maxSamples, SampleStateMask sampleStates, ViewStateMask viewStates, InstanceStateMask instanceStates)
        {
            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)ReadInstance(_native, ref rd, ref ri, handle, maxSamples, sampleStates, viewStates, instanceStates);

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode TakeInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle handle)
        {
            return TakeInstance(receivedData, receivedInfo, handle, ResourceLimitsQosPolicy.LengthUnlimited, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

		public ReturnCode TakeInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle handle, int maxSamples)
        {
            return TakeInstance(receivedData, receivedInfo, handle, maxSamples, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

		public ReturnCode TakeInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle handle, int maxSamples, ReadCondition condition)
        {
            if (condition == null)
            {
                return ReturnCode.BadParameter;
            }

            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)TakeInstanceWithCondition(_native, ref rd, ref ri, (int)handle, maxSamples, condition.ToNative());

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode TakeInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle handle, int maxSamples, SampleStateMask sampleStates, ViewStateMask viewStates, InstanceStateMask instanceStates)
        {
            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)TakeInstance(_native, ref rd, ref ri, handle, maxSamples, sampleStates, viewStates, instanceStates);

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode ReadNextInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle previousHandle)
        {
            return ReadNextInstance(receivedData, receivedInfo, previousHandle, ResourceLimitsQosPolicy.LengthUnlimited, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

		public ReturnCode ReadNextInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle previousHandle, int maxSamples)
        {
            return ReadNextInstance(receivedData, receivedInfo, previousHandle, maxSamples, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

		public ReturnCode ReadNextInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle previousHandle, int maxSamples, ReadCondition condition)
        {
            if (condition == null)
            {
                return ReturnCode.BadParameter;
            }

            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)ReadNextInstanceWithCondition(_native, ref rd, ref ri, previousHandle, maxSamples, condition.ToNative());

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode ReadNextInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle previousHandle, int maxSamples, SampleStateMask sampleStates, ViewStateMask viewStates, InstanceStateMask instanceStates)
        {
            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)ReadNextInstance(_native, ref rd, ref ri, previousHandle, maxSamples, sampleStates, viewStates, instanceStates);

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode TakeNextInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle previousHandle)
        {
            return TakeNextInstance(receivedData, receivedInfo, previousHandle, ResourceLimitsQosPolicy.LengthUnlimited, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

		public ReturnCode TakeNextInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle previousHandle, int maxSamples)
        {
            return TakeNextInstance(receivedData, receivedInfo, previousHandle, maxSamples, SampleStateMask.AnySampleState, ViewStateMask.AnyViewState, InstanceStateMask.AnyInstanceState);
        }

		public ReturnCode TakeNextInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle previousHandle, int maxSamples, ReadCondition condition)
        {
            if (condition == null)
            {
                return ReturnCode.BadParameter;
            }

            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)TakeNextInstanceWithCondition(_native, ref rd, ref ri, previousHandle, maxSamples, condition.ToNative());

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode TakeNextInstance(List<<%TYPE%>> receivedData, List<SampleInfo> receivedInfo, InstanceHandle previousHandle, int maxSamples, SampleStateMask sampleStates, ViewStateMask viewStates, InstanceStateMask instanceStates)
        {
            if (receivedData == null || receivedInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            receivedData.Clear();
            receivedInfo.Clear();

            IntPtr rd = IntPtr.Zero;
            IntPtr ri = IntPtr.Zero;

            ReturnCode ret = ReturnCode.Error;
            ret = (ReturnCode)TakeNextInstance(_native, ref rd, ref ri, previousHandle, maxSamples, sampleStates, viewStates, instanceStates);

            if (ret == ReturnCode.Ok && !rd.Equals(IntPtr.Zero) && !ri.Equals(IntPtr.Zero))
            {
                IList<<%TYPE%>Wrapper> data = new List<<%TYPE%>Wrapper>();
                IList<SampleInfoWrapper> info = new List<SampleInfoWrapper>();

                MarshalHelper.PtrToSequence(rd, ref data);
                MarshalHelper.PtrToSequence(ri, ref info);

                if (data != null)
                {
                    foreach (var d in data)
                    {
                        var aux = new <%TYPE%>();
                        aux.FromNative(d);
                        receivedData.Add(aux);
                    }
                }

                if (info != null && info.Count > 0)
                {
                    foreach (var i in info)
                    {
                        SampleInfo aux = new SampleInfo();
                        aux.FromNative(i);
                        receivedInfo.Add(aux);
                    }
                }
            }

            return ret;
        }

        public ReturnCode ReadNextSample(<%TYPE%> data, SampleInfo sampleInfo)
        {
            if (data == null || sampleInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            ReturnCode ret = ReturnCode.Error;
            <%TYPE%>Wrapper wrapper = new <%TYPE%>Wrapper();
            SampleInfoWrapper infoWrapper = new SampleInfoWrapper();
            ret = (ReturnCode)ReadNextSample(_native, ref wrapper, ref infoWrapper);
            if (ret == ReturnCode.Ok)
            {
                data.FromNative(wrapper);
                sampleInfo.FromNative(infoWrapper);

                // Always free the unmanaged memory.
                // As the unmanaged memory was reserved in C++ we need a method to release it from C++.
                Release(ref wrapper);
            }

            return ret;
        }

        public ReturnCode TakeNextSample(<%TYPE%> data, SampleInfo sampleInfo)
        {
            if (data == null || sampleInfo == null)
            {
                return ReturnCode.BadParameter;
            }

            ReturnCode ret = ReturnCode.Error;
            <%TYPE%>Wrapper wrapper = new <%TYPE%>Wrapper();
            SampleInfoWrapper infoWrapper = new SampleInfoWrapper();
            ret = (ReturnCode)TakeNextSample(_native, ref wrapper, ref infoWrapper);
            if (ret == ReturnCode.Ok)
            {
                data.FromNative(wrapper);
                sampleInfo.FromNative(infoWrapper);

                // Always free the unmanaged memory.
                // As the unmanaged memory was reserved in C++ we need a method to release it from C++.
                Release(ref wrapper);
            }

            return ret;
        }

        public ReturnCode GetKeyValue(<%TYPE%> data, InstanceHandle handle)
        {
            if (data == null)
            {
                return ReturnCode.BadParameter;
            }

            if (handle == InstanceHandle.HandleNil)
            {
                return ReturnCode.BadParameter;
            }

            ReturnCode ret = ReturnCode.Error;
            <%TYPE%>Wrapper aux = new <%TYPE%>Wrapper();

            ret = (ReturnCode)GetKeyValue(_native, ref aux, handle);            

            if (ret == ReturnCode.Ok)
            {
                data.FromNative(aux);
            }

            return ret;
        }

        public InstanceHandle LookupInstance(<%TYPE%> instance)
        {
            InstanceHandle ret = InstanceHandle.HandleNil;
            List<IntPtr> toRelease = new List<IntPtr>();

            ret = LookupInstance(_native, instance.ToNative(toRelease));

            // Always free the unmanaged memory.
            foreach (IntPtr ptr in toRelease)
            {
                Marshal.FreeHGlobal(ptr);
            }

            return ret;
        }
        #endregion

        #region PInvoke
        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>Wrapper_release", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr Release([MarshalAs(UnmanagedType.Struct), In, Out] ref <%TYPE%>Wrapper data);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_Narrow", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr Narrow(IntPtr dr);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_Read", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Read(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int maxSamples, uint sampleStates, uint viewStates, uint instanceStates);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_ReadWithCondition", CallingConvention = CallingConvention.Cdecl)]
        private static extern int ReadWithCondition(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int maxSamples, IntPtr condition);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_Take", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Take(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int maxSamples, uint sampleStates, uint viewStates, uint instanceStates);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_TakeWithCondition", CallingConvention = CallingConvention.Cdecl)]
        private static extern int TakeWithCondition(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int maxSamples, IntPtr condition);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_ReadInstance", CallingConvention = CallingConvention.Cdecl)]
        private static extern int ReadInstance(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int handle, int maxSamples, uint sampleStates, uint viewStates, uint instanceStates);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_ReadInstanceWithCondition", CallingConvention = CallingConvention.Cdecl)]
        private static extern int ReadInstanceWithCondition(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int handle, int maxSamples, IntPtr condition);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_TakeInstance", CallingConvention = CallingConvention.Cdecl)]
        private static extern int TakeInstance(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int handle, int maxSamples, uint sampleStates, uint viewStates, uint instanceStates);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_TakeInstanceWithCondition", CallingConvention = CallingConvention.Cdecl)]
        private static extern int TakeInstanceWithCondition(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int handle, int maxSamples, IntPtr condition);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_ReadNextInstance", CallingConvention = CallingConvention.Cdecl)]
        private static extern int ReadNextInstance(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int handle, int maxSamples, uint sampleStates, uint viewStates, uint instanceStates);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_ReadNextInstanceWithCondition", CallingConvention = CallingConvention.Cdecl)]
        private static extern int ReadNextInstanceWithCondition(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int handle, int maxSamples, IntPtr condition);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_TakeNextInstance", CallingConvention = CallingConvention.Cdecl)]
        private static extern int TakeNextInstance(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int handle, int maxSamples, uint sampleStates, uint viewStates, uint instanceStates);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_TakeNextInstanceWithCondition", CallingConvention = CallingConvention.Cdecl)]
        private static extern int TakeNextInstanceWithCondition(IntPtr dr, ref IntPtr receivedData, ref IntPtr receivedInfo, int handle, int maxSamples, IntPtr condition);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_ReadNextSample", CallingConvention = CallingConvention.Cdecl)]
        private static extern int ReadNextSample(IntPtr dr, [MarshalAs(UnmanagedType.Struct), In, Out] ref <%TYPE%>Wrapper data, [In, Out] ref SampleInfoWrapper sampleInfo);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_TakeNextSample", CallingConvention = CallingConvention.Cdecl)]
        private static extern int TakeNextSample(IntPtr dr, [MarshalAs(UnmanagedType.Struct), In, Out] ref <%TYPE%>Wrapper data, [In, Out] ref SampleInfoWrapper sampleInfo);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_LookupInstance", CallingConvention = CallingConvention.Cdecl)]
        private static extern int LookupInstance(IntPtr dr, <%TYPE%>Wrapper instance);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(<%TYPE%>.API_DLL, EntryPoint = "<%SCOPED_METHOD%>DataReader_GetKeyValue", CallingConvention = CallingConvention.Cdecl)]
        private static extern int GetKeyValue(IntPtr dr, [MarshalAs(UnmanagedType.Struct), In, Out] ref <%TYPE%>Wrapper data, int handle);
        #endregion
    }