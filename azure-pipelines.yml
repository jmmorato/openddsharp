jobs:
- job: VisualStudio2019
  timeoutInMinutes: 120
  pool:
    vmImage: windows-2019
  strategy:
    matrix:
      Debug64:
        BuildPlatform: x64
        BuildConfiguration: Debug
      Release64:
        BuildPlatform: x64
        BuildConfiguration: Release
      Debug32:
        BuildPlatform: x86
        BuildConfiguration: Debug
      Release32:
        BuildPlatform: x86
        BuildConfiguration: Release
  variables:
    VCPKG_ROOT: $(Build.SourcesDirectory)\ext\vcpkg
    OPENDDS_ROOT: $(Build.SourcesDirectory)\ext\OpenDDS
  steps:
    - task: NuGetToolInstaller@1
      displayName: "Install NuGet v5.4.0"
      inputs:
        versionSpec: 5.4.0
    - task: NuGetCommand@2
      displayName: "NuGet Restore OpenDDSharp"
      inputs:
        command: 'restore'
        restoreSolution: '$(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.sln'
        feedsToUse: 'select'
        versioningScheme: 'off'
    - task: DotNetCoreCLI@2
      displayName: "dotnet restore"
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        projects: '**/*.csproj'
        workingDirectory: '$(Build.SourcesDirectory)\OpenDDSharp'
    - script: |
        git clone -q git://github.com/objectcomputing/OpenDDS.git %OPENDDS_ROOT%
        if %BuildPlatform%==x64 (set VC_ARCH=x64) else set VC_ARCH=Win32
        echo ##vso[task.setvariable variable=VcArch]%VC_ARCH%
        echo ##vso[task.setvariable variable=OpenDdsRoot]%OPENDDS_ROOT%
      displayName: 'Clone OpenDDS'
      failOnStderr: true
    - script: |
        git fetch -q && git fetch -q --tags
        git checkout -q tags/DDS-3.14.1
      displayName: 'Checkout OpenDDS v3.14.1'
      workingDirectory: '$(OpenDdsRoot)'
      failOnStderr: true
    - script: |
        git apply $(Build.SourcesDirectory)\Patches\ConditionImpl.h.patch
        git apply $(Build.SourcesDirectory)\Patches\configure.patch
      displayName: 'Apply OpenDDS->OpenDDSharp Patches'
      workingDirectory: '$(OpenDdsRoot)'
      failOnStderr: true
    - task: BatchScript@1
      displayName: 'Call vcvarsall.bat'
      inputs:
        filename: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"'
        arguments: $(BuildPlatform)
        modifyEnvironment: true
    - task: BatchScript@1
      displayName: Put perl on PATH
      inputs:
        filename: ext\OpenDDS\tools\scripts\prepend_path
        arguments: 'C:\Strawberry\perl\bin'
        modifyEnvironment: true
        workingFolder: '($OpenDdsRoot)'
        failOnStandardError: true
    - script: |        
        if %BuildConfiguration%==Release set OPT=--no-debug --optimize
        call configure -v --ace-github-latest --no-tests %OPT%
        perl tools\scripts\show_build_config.pl
      workingDirectory: $(OpenDdsRoot)
      displayName: 'Run configure script'
      failOnStderr: #
    - task: BatchScript@1
      displayName: Setenv from configure script
      inputs:
        filename: ext\OpenDDS\setenv.cmd
        modifyEnvironment: true
    - task: VSBuild@1
      displayName: 'Build OpenDDS'
      inputs:
        solution: ext\OpenDDS\DDS_TAOv2.sln
        platform: $(VcArch)
        configuration: $(BuildConfiguration)
        maximumCpuCount: true
    - script: |
        xcopy %ACE_ROOT%\lib\* %ACE_ROOT%\lib_$(BuildPlatform) /s /i
        xcopy %ACE_ROOT%\bin\* %ACE_ROOT%\bin_$(BuildPlatform) /s /i
        xcopy %DDS_ROOT%\lib\* %DDS_ROOT%\lib_$(BuildPlatform) /s /i
        xcopy %DDS_ROOT%\bin\* %DDS_ROOT%\bin_$(BuildPlatform) /s /i
        xcopy $(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.IdlGenerator\HeaderTemplate.txt %DDS_ROOT%\dds\idl
        xcopy $(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.IdlGenerator\ImplTemplate.txt %DDS_ROOT%\dds\idl
        msbuild $(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.sln /t:OpenDDSharp_ExportFileGenerator /p:Configuration="$(BuildConfiguration)" /p:Platform="Any CPU" /p:BuildProjectReferences=false
      displayName: 'Prepare to build OpenDDSharp'
      failOnStderr: true
    - task: NuGetCommand@2
      displayName: "NuGet Restore OpenDDSharp "
      inputs:
        command: 'restore'
        restoreSolution: '$(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.sln'
        feedsToUse: 'select'
        versioningScheme: 'off'
    - task: VSBuild@1
      displayName: 'Build OpenDDSharp'
      enabled: true
      inputs:
        solution: OpenDDSharp\OpenDDSharp.sln
        platform: $(BuildPlatform)
        configuration: $(BuildConfiguration)
        msbuildArgs: /p:PlatformToolset=v142
        maximumCpuCount: false
    - task: VSTest@2
      displayName: Execute CppCli Unit Tests
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: 'OpenDDSharp\OpenDDSharp.UnitTest\bin\$(BuildPlatform)\$(BuildConfiguration)\OpenDDSharp.UnitTest.dll'
        runSettingsFile: OpenDDSharp\CodeCoverage.runsettings
        searchFolder: '$(System.DefaultWorkingDirectory)'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        runTestsInIsolation: true
        runInParallel: false
        codeCoverageEnabled: true
    - task: DotNetCoreCLI@2
      displayName: Execute Standard Unit Tests
      inputs:
        command: 'test'
        projects: '$(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.Standard.UnitTest\*.csproj'
        arguments: '--no-build -p:Platform=$(BuildPlatform) -c $(BuildConfiguration) --settings OpenDDSharp\CodeCoverage.runsettings --logger trx'
- job: VisualStudio2017
  timeoutInMinutes: 120
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Debug64:
        BuildPlatform: x64
        BuildConfiguration: Debug
      Release64:
        BuildPlatform: x64
        BuildConfiguration: Release
      Debug32:
        BuildPlatform: x86
        BuildConfiguration: Debug
      Release32:
        BuildPlatform: x86
        BuildConfiguration: Release
  variables:
    VCPKG_ROOT: $(Build.SourcesDirectory)\ext\vcpkg
    OPENDDS_ROOT: $(Build.SourcesDirectory)\ext\OpenDDS
  steps:
    - task: NuGetToolInstaller@1
      displayName: "Install NuGet v5.4.0"
      inputs:
        versionSpec: 5.4.0
    - task: NuGetCommand@2
      displayName: "NuGet Restore OpenDDSharp"
      inputs:
        command: 'restore'
        restoreSolution: '$(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.sln'
        feedsToUse: 'select'
        versioningScheme: 'off'
    - task: DotNetCoreCLI@2
      displayName: "dotnet restore"
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        projects: '**/*.csproj'
        workingDirectory: $(Build.SourcesDirectory)\OpenDDSharp
    - script: |
        git clone -q --depth 1 git://github.com/objectcomputing/OpenDDS.git %OPENDDS_ROOT%
        if %BuildPlatform%==x64 (set VC_ARCH=x64) else set VC_ARCH=Win32
        echo ##vso[task.setvariable variable=VcArch]%VC_ARCH%
        echo ##vso[task.setvariable variable=OpenDdsRoot]%OPENDDS_ROOT%
      displayName: 'Clone OpenDDS'
      failOnStderr: true
    - script: |
        git fetch -q && git fetch -q --tags
        git checkout -q tags/DDS-3.14.1
      displayName: 'Checkout OpenDDS v3.14.1'
      workingDirectory: '$(OpenDdsRoot)'
      failOnStderr: true
    - script: |
        git apply $(Build.SourcesDirectory)\Patches\ConditionImpl.h.patch
        git apply $(Build.SourcesDirectory)\Patches\configure.patch
      displayName: 'Apply OpenDDS->OpenDDSharp Patches'
      workingDirectory: '$(OpenDdsRoot)'
      failOnStderr: true
    - task: BatchScript@1
      displayName: 'Call vcvarsall.bat'
      inputs:
        filename: '"C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"'
        arguments: $(BuildPlatform)
        modifyEnvironment: true
    - script: |
        setx PATH "C:\Strawberry\perl\bin;%PATH%"
      displayName: 'Put perl on PATH'
      failOnStderr: false
    - script: |
        set PATH=C:\Strawberry\perl\bin;%PATH%
        if %BuildConfiguration%==Release set OPT=--no-debug --optimize
        call configure -v --ace-github-latest --no-tests %OPT%
      workingDirectory: $(OpenDdsRoot)
      displayName: 'Run configure script'
      failOnStderr: true
    - task: BatchScript@1
      displayName: 'Setenv from configure script'
      inputs:
        filename: $(Build.SourcesDirectory)\ext\OpenDDS\setenv.cmd
        modifyEnvironment: true
    - task: MSBuild@1
      displayName: 'Build OpenDDS'
      enabled: true
      inputs:
        solution: ext\OpenDDS\DDS_TAOv2.sln
        platform: $(VcArch)
        configuration: $(BuildConfiguration)
        maximumCpuCount: true
    - script: |
        xcopy %ACE_ROOT%\lib\* %ACE_ROOT%\lib_$(BuildPlatform) /s /i
        xcopy %ACE_ROOT%\bin\* %ACE_ROOT%\bin_$(BuildPlatform) /s /i
        xcopy %DDS_ROOT%\lib\* %DDS_ROOT%\lib_$(BuildPlatform) /s /i
        xcopy %DDS_ROOT%\bin\* %DDS_ROOT%\bin_$(BuildPlatform) /s /i
        xcopy $(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.IdlGenerator\HeaderTemplate.txt %DDS_ROOT%\dds\idl
        xcopy $(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.IdlGenerator\ImplTemplate.txt %DDS_ROOT%\dds\idl
        msbuild $(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.sln /t:OpenDDSharp_ExportFileGenerator /p:Configuration="$(BuildConfiguration)" /p:Platform="Any CPU" /p:BuildProjectReferences=false
      displayName: 'Prepare to build OpenDDSharp'
      failOnStderr: true
    - task: NuGetCommand@2
      displayName: "NuGet Restore OpenDDSharp"
      inputs:
        command: 'restore'
        restoreSolution: '$(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.sln'
        feedsToUse: 'select'
        versioningScheme: 'off'
    - task: VSBuild@1
      displayName: 'Build OpenDDSharp'
      enabled: true
      inputs:
        solution: OpenDDSharp\OpenDDSharp.sln
        platform: $(BuildPlatform)
        configuration: $(BuildConfiguration)
        maximumCpuCount: false
    - task: VSTest@2
      displayName: Execute CppCli Unit Tests
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: 'OpenDDSharp\OpenDDSharp.UnitTest\bin\$(BuildPlatform)\$(BuildConfiguration)\OpenDDSharp.UnitTest.dll'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        runSettingsFile: OpenDDSharp\CodeCoverage.runsettings
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        runTestsInIsolation: true
        runInParallel: false
        codeCoverageEnabled: true
    - task: DotNetCoreCLI@2
      displayName: Execute Standard Unit Tests
      inputs:
        command: 'test'
        projects: '$(Build.SourcesDirectory)\OpenDDSharp\OpenDDSharp.Standard.UnitTest\*.csproj'
        arguments: '--no-build -p:Platform=$(BuildPlatform) -c $(BuildConfiguration) --settings OpenDDSharp\CodeCoverage.runsettings --logger trx'
