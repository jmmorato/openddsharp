#include "TestInclude.idl"

module CdrWrapper {

    const short TEST_SHORT_CONST = -1;
    const unsigned short TEST_USHORT_CONST = 1;
    const long TEST_LONG_CONST = -2;
    const unsigned long TEST_ULONG_CONST = 2;
    const long long TEST_LONGLONG_CONST = -3;
    const unsigned long long TEST_ULONGLONG_CONST = 3;
    const float TEST_FLOAT_CONST = 4.1;
    const double TEST_DOUBLE_CONST = 5.1;
    const char TEST_CHAR_CONST = 'X';
    const wchar TEST_WCHAR_CONST = 'S';
    const octet TEST_OCTET_CONST = 0x42;
    const boolean TEST_BOOLEAN_CONST = 1;
    const string TEST_STRING_CONST = "Hello, I love you, won't you tell me your name?";
    const wstring TEST_WSTRING_CONST = L"君たちの基地はすべて我々のもの";

    typedef sequence<octet> UnboundedOctetSeqType;
    typedef sequence<char> UnboundedCharSeqType;
    typedef sequence<wchar> UnboundedWCharSeqType;
    typedef sequence<boolean> UnboundedBooleanSeqType;
    typedef sequence<int8> UnboundedInt8SeqType;
    typedef sequence<int16> UnboundedInt16SeqType;
    typedef sequence<int32> UnboundedInt32SeqType;
    typedef sequence<int64> UnboundedInt64SeqType;
    typedef sequence<uint8> UnboundedUInt8SeqType;
    typedef sequence<uint16> UnboundedUInt16SeqType;
    typedef sequence<uint32> UnboundedUInt32SeqType;
    typedef sequence<uint64> UnboundedUInt64SeqType;
    typedef sequence<float> UnboundedFloatSeqType;
    typedef sequence<double> UnboundedDoubleSeqType;

    typedef sequence<octet, 5> BoundedOctetSeqType;
    typedef sequence<char, 5> BoundedCharSeqType;
    typedef sequence<wchar, 5> BoundedWCharSeqType;
    typedef sequence<boolean, 5> BoundedBooleanSeqType;
    typedef sequence<int8, 5> BoundedInt8SeqType;
    typedef sequence<int16, 5> BoundedInt16SeqType;
    typedef sequence<int32, 5> BoundedInt32SeqType;
    typedef sequence<int64, 5> BoundedInt64SeqType;
    typedef sequence<uint8, 5> BoundedUInt8SeqType;
    typedef sequence<uint16, 5> BoundedUInt16SeqType;
    typedef sequence<uint32, 5> BoundedUInt32SeqType;
    typedef sequence<uint64, 5> BoundedUInt64SeqType;
    typedef sequence<float, 5> BoundedFloatSeqType;
    typedef sequence<double, 5> BoundedDoubleSeqType;

    typedef char CharArrayType[5];
    typedef wchar WCharArrayType[5];
    typedef boolean BooleanArrayType[5];
    typedef octet OctetArrayType[2048];
    typedef int8 Int8ArrayType[5];
    typedef uint8 UInt8ArrayType[5];
    typedef short Int16ArrayType[5];
    typedef unsigned short UInt16ArrayType[5];
    typedef long Int32ArrayType[5];
    typedef unsigned long UInt32ArrayType[5];
    typedef long long Int64ArrayType[5];
    typedef unsigned long long UInt64ArrayType[5];
    typedef float FloatArrayType[5];
    typedef double DoubleArrayType[5];

    typedef int8 Int8MultiArrayType[3][4][2];
    typedef uint8 UInt8MultiArrayType[3][4][2];
    typedef int16 Int16MultiArrayType[3][4][2];
    typedef uint16 UInt16MultiArrayType[3][4][2];
    typedef int32 Int32MultiArrayType[3][4][2];
    typedef uint32 UInt32MultiArrayType[3][4][2];
    typedef int64 Int64MultiArrayType[3][4][2];
    typedef uint64 UInt64MultiArrayType[3][4][2];
    typedef float FloatMultiArrayType[3][4][2];
    typedef double DoubleMultiArrayType[3][4][2];
    typedef char CharMultiArrayType[3][4][2];
    typedef wchar WCharMultiArrayType[3][4][2];
    typedef boolean BooleanMultiArrayType[3][4][2];
    typedef octet OctetMultiArrayType[3][4][2];

    typedef sequence<octet, 2048> OctetSequenceType;

    typedef string<32> BoundedStringType;
    typedef wstring<32> BoundedWStringType;

    typedef sequence<string> UnboundedStringSequenceType;
    typedef sequence<string, 5> BoundedStringSequenceType;
    typedef sequence<wstring> UnboundedWStringSequenceType;
    typedef sequence<wstring, 5> BoundedWStringSequenceType;

    typedef string StringArrayType[5];
    typedef wstring WStringArrayType[5];

    typedef string StringMultiArrayType[3][4][2];
    typedef wstring WStringMultiArrayType[3][4][2];

    enum TestEnum {
        ENUM1,
        ENUM2,
        ENUM3,
        ENUM4,
        ENUM5,
        ENUM6,
        ENUM7,
        ENUM8,
        ENUM9,
        ENUM10,
        ENUM11,
        ENUM12
    };

    typedef sequence<TestEnum> UnboundedEnumSequenceType;
    typedef sequence<TestEnum, 5> BoundedEnumSequenceType;

    const TestEnum TEST_ENUM_CONST = TestEnum::ENUM6;

    typedef TestEnum EnumArrayType[5];

    typedef TestEnum EnumMultiArrayType[3][4][2];

    @topic
    struct NestedStruct {
        long Id;
        string Message;
    };

    typedef sequence<NestedStruct> UnboundedStructSequenceType;
    typedef sequence<NestedStruct, 5> BoundedStructSequenceType;

    typedef NestedStruct StructArrayType[5];

    typedef NestedStruct StructMultiArrayType[3][4][2];

    @topic
    struct TestStruct {
        NestedStruct NestedStructField;
    };

    @topic
    struct TestStructSequence {
        UnboundedStructSequenceType UnboundedStructSequenceField;
        BoundedStructSequenceType BoundedStructSequenceField;
    };

    @topic
    struct TestStructArray {
        StructArrayType StructArrayField;
    };

    @topic
    struct TestStructMultiArray {
        StructMultiArrayType StructMultiArrayField;
    };

    @topic
    struct TestInclude {
        @key string Id;
        int16 ShortField;
        CdrWrapperInclude::IncludeStruct IncludeField;
    };

    @topic
    struct TestPrimitive {
        boolean BoolField;
        octet ByteField;
        int8 Int8Field;
        int16 Int16Field;
        int32 Int32Field;
        int64 Int64Field;
        uint8 UInt8Field;
        uint16 UInt16Field;
        uint32 UInt32Field;
        uint64 UInt64Field;
        float FloatField;
        double DoubleField;
        char CharField;
        wchar WCharField;
    };

    @topic
    struct TestPrimitiveSequence {
        UnboundedBooleanSeqType UnboundedBooleanSequenceField;
        UnboundedOctetSeqType UnboundedByteSequenceField;
        UnboundedInt8SeqType UnboundedInt8SequenceField;
        UnboundedInt16SeqType UnboundedInt16SequenceField;
        UnboundedInt32SeqType UnboundedInt32SequenceField;
        UnboundedInt64SeqType UnboundedInt64SequenceField;
        UnboundedUInt8SeqType UnboundedUInt8SequenceField;
        UnboundedUInt16SeqType UnboundedUInt16SequenceField;
        UnboundedUInt32SeqType UnboundedUInt32SequenceField;
        UnboundedUInt64SeqType UnboundedUInt64SequenceField;
        UnboundedFloatSeqType UnboundedFloatSequenceField;
        UnboundedDoubleSeqType UnboundedDoubleSequenceField;
        UnboundedCharSeqType UnboundedCharSequenceField;
        UnboundedWCharSeqType UnboundedWCharSequenceField;

        BoundedBooleanSeqType BoundedBooleanSequenceField;
        BoundedOctetSeqType BoundedByteSequenceField;
        BoundedInt8SeqType BoundedInt8SequenceField;
        BoundedInt16SeqType BoundedInt16SequenceField;
        BoundedInt32SeqType BoundedInt32SequenceField;
        BoundedInt64SeqType BoundedInt64SequenceField;
        BoundedUInt8SeqType BoundedUInt8SequenceField;
        BoundedUInt16SeqType BoundedUInt16SequenceField;
        BoundedUInt32SeqType BoundedUInt32SequenceField;
        BoundedUInt64SeqType BoundedUInt64SequenceField;
        BoundedFloatSeqType BoundedFloatSequenceField;
        BoundedDoubleSeqType BoundedDoubleSequenceField;
        BoundedCharSeqType BoundedCharSequenceField;
        BoundedWCharSeqType BoundedWCharSequenceField;
    };

    @topic
    struct TestPrimitiveArray {
        BooleanArrayType BooleanArrayField;
        OctetArrayType ByteArrayField;
        Int8ArrayType Int8ArrayField;
        UInt8ArrayType UInt8ArrayField;
        Int16ArrayType Int16ArrayField;
        Int32ArrayType Int32ArrayField;
        Int64ArrayType Int64ArrayField;
        UInt16ArrayType UInt16ArrayField;
        UInt32ArrayType UInt32ArrayField;
        UInt64ArrayType UInt64ArrayField;
        FloatArrayType FloatArrayField;
        DoubleArrayType DoubleArrayField;
        CharArrayType CharArrayField;
        WCharArrayType WCharArrayField;
    };

    @topic
    struct TestPrimitiveMultiArray {
        Int8MultiArrayType Int8MultiArrayField;
        UInt8MultiArrayType UInt8MultiArrayField;
        Int16MultiArrayType Int16MultiArrayField;
        UInt16MultiArrayType UInt16MultiArrayField;
        Int32MultiArrayType Int32MultiArrayField;
        UInt32MultiArrayType UInt32MultiArrayField;
        Int64MultiArrayType Int64MultiArrayField;
        UInt64MultiArrayType UInt64MultiArrayField;
        FloatMultiArrayType FloatMultiArrayField;
        DoubleMultiArrayType DoubleMultiArrayField;
        CharMultiArrayType CharMultiArrayField;
        WCharMultiArrayType WCharMultiArrayField;
        BooleanMultiArrayType BooleanMultiArrayField;
        OctetMultiArrayType OctetMultiArrayField;
    };

    @topic
    struct TestStrings {
        string UnboundedStringField;
        wstring UnboundedWStringField;
        BoundedStringType BoundedStringField;
        BoundedWStringType BoundedWStringField;
    };

    @topic
    struct TestStringsSequence {
        UnboundedStringSequenceType UnboundedStringSequenceField;
        UnboundedWStringSequenceType UnboundedWStringSequenceField;
        BoundedStringSequenceType BoundedStringSequenceField;
        BoundedWStringSequenceType BoundedWStringSequenceField;
    };

    @topic
    struct TestStringsArray {
        StringArrayType StringArrayField;
        WStringArrayType WStringArrayField;
    };

    @topic
    struct TestStringsMultiArray {
        StringMultiArrayType StringMultiArrayField;
        WStringMultiArrayType WStringMultiArrayField;
    };

    @topic
    struct TestEnums {
        TestEnum TestEnumField;
    };

    @topic
    struct TestEnumsSequence {
        UnboundedEnumSequenceType UnboundedEnumSequenceField;
        BoundedEnumSequenceType BoundedEnumSequenceField;
    };

    @topic
    struct TestEnumsArray {
        EnumArrayType EnumArrayField;
    };

    @topic
    struct TestEnumsMultiArray {
        EnumMultiArrayType EnumMultiArrayField;
    };

    @topic
    struct KeyedOctets {
        @key string<1024> KeyField;
        OctetSequenceType ValueField;
    };
};
