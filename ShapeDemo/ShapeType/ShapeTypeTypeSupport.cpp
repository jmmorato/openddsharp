//------------------------------------------------------------------------------
// <auto-generated>
// WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
// DDS version: 3.14
// ACE version: 6.5.11
// Running on input file: ShapeType.idl
// </auto-generated>
//------------------------------------------------------------------------------

#include "ShapeTypeTypeSupport.h"

OpenDDSharp::org::omg::dds::demo::ShapeType::ShapeType() {
    m_color = "";
    m_x = 0;
    m_y = 0;
    m_shapesize = 0;
}

System::String^ OpenDDSharp::org::omg::dds::demo::ShapeType::color::get() {
    return m_color;
}

void OpenDDSharp::org::omg::dds::demo::ShapeType::color::set(System::String^ value) {
    m_color = value;
}

System::Int32 OpenDDSharp::org::omg::dds::demo::ShapeType::x::get() {
    return m_x;
}

void OpenDDSharp::org::omg::dds::demo::ShapeType::x::set(System::Int32 value) {
    m_x = value;
}

System::Int32 OpenDDSharp::org::omg::dds::demo::ShapeType::y::get() {
    return m_y;
}

void OpenDDSharp::org::omg::dds::demo::ShapeType::y::set(System::Int32 value) {
    m_y = value;
}

System::Int32 OpenDDSharp::org::omg::dds::demo::ShapeType::shapesize::get() {
    return m_shapesize;
}

void OpenDDSharp::org::omg::dds::demo::ShapeType::shapesize::set(System::Int32 value) {
    m_shapesize = value;
}

::org::omg::dds::demo::ShapeType OpenDDSharp::org::omg::dds::demo::ShapeType::ToNative() {
    ::org::omg::dds::demo::ShapeType ret;
    msclr::interop::marshal_context context;

    if (m_color != nullptr) {
        ret.color = context.marshal_as<const char*>(m_color);
    }
    else {
        ret.color = "";
    }
    ret.x = m_x;
    ret.y = m_y;
    ret.shapesize = m_shapesize;

    return ret;
}

void  OpenDDSharp::org::omg::dds::demo::ShapeType::FromNative(::org::omg::dds::demo::ShapeType native) {
    m_color = gcnew System::String(native.color);
    m_x = native.x;
    m_y = native.y;
    m_shapesize = native.shapesize;
}

///////////////////////////////////////////////////////////////////////

OpenDDSharp::org::omg::dds::demo::ShapeTypeTypeSupport::ShapeTypeTypeSupport() {
	impl_entity = new ::org::omg::dds::demo::ShapeTypeTypeSupportImpl();
};

System::String^ OpenDDSharp::org::omg::dds::demo::ShapeTypeTypeSupport::GetTypeName() {
	return context.marshal_as<System::String^>(impl_entity->get_type_name());
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeTypeSupport::RegisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName) {
    const char * type_name = context.marshal_as<const char*>(typeName);
    ::DDS::DomainParticipant_ptr dp = participant->impl_entity;
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->register_type(dp, type_name);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeTypeSupport::UnregisterType(::OpenDDSharp::DDS::DomainParticipant^ participant, System::String^ typeName) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_type(participant->impl_entity, context.marshal_as<const char*>(typeName));
};

///////////////////////////////////////////////////////////////////////

OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::ShapeTypeDataWriter(::OpenDDSharp::DDS::DataWriter^ dataWriter) : OpenDDSharp::DDS::DataWriter(dataWriter->impl_entity) {
	impl_entity = ::org::omg::dds::demo::ShapeTypeDataWriter::_narrow(dataWriter->impl_entity);
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::RegisterInstance(ShapeType^ instance) {
	return impl_entity->register_instance(instance->ToNative());
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::RegisterInstance(ShapeType^ instance, OpenDDSharp::DDS::Timestamp timestamp) {
    ::DDS::Time_t time;	
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return impl_entity->register_instance_w_timestamp(instance->ToNative(), time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::UnregisterInstance(ShapeType^ data) {
	::org::omg::dds::demo::ShapeType native = data->ToNative();
    ::DDS::InstanceHandle_t handle = impl_entity->lookup_instance(native);
    if (handle == ::DDS::HANDLE_NIL) {
        return OpenDDSharp::DDS::ReturnCode::PreconditionNotMet;
    }
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::UnregisterInstance(ShapeType^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::UnregisterInstance(ShapeType^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->unregister_instance_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::Write(ShapeType^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::Write(ShapeType^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::Write(ShapeType^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->write_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::Dispose(ShapeType^ data) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose(data->ToNative(), ::DDS::HANDLE_NIL);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::Dispose(ShapeType^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose(data->ToNative(), handle);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::Dispose(ShapeType^ data, OpenDDSharp::DDS::InstanceHandle handle, OpenDDSharp::DDS::Timestamp timestamp) {
	::DDS::Time_t time;
	time.sec = timestamp.Seconds;
	time.nanosec = timestamp.NanoSeconds;

	return (OpenDDSharp::DDS::ReturnCode)impl_entity->dispose_w_timestamp(data->ToNative(), handle, time);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::GetKeyValue(ShapeType^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	::org::omg::dds::demo::ShapeType aux;
    ::DDS::ReturnCode_t ret = impl_entity->get_key_value(aux, handle);
    if (ret == ::DDS::RETCODE_OK) {
        data->FromNative(aux);
    }
	return (OpenDDSharp::DDS::ReturnCode)ret;
};

System::Int32 OpenDDSharp::org::omg::dds::demo::ShapeTypeDataWriter::LookupInstance(ShapeType^ instance) {
	return impl_entity->lookup_instance(instance->ToNative());
};

///////////////////////////////////////////////////////////////////////

OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ShapeTypeDataReader(::OpenDDSharp::DDS::DataReader^ dataReader) : OpenDDSharp::DDS::DataReader(dataReader->impl_entity) {
	impl_entity = ::org::omg::dds::demo::ShapeTypeDataReader::_narrow(dataReader->impl_entity);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Read(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo) {
	return OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Read(receivedData, receivedInfo, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Read(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples) {
	return OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Read(receivedData, receivedInfo, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Read(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();
    
	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_w_condition(received_data, info_seq, maxSamples, condition->impl_entity);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Read(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();
    
	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Take(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo) {
	return OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Take(receivedData, receivedInfo, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Take(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples) {
	return OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Take(receivedData, receivedInfo, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Take(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_w_condition(received_data, info_seq, maxSamples, condition->impl_entity);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::Take(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take(received_data, info_seq, maxSamples, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	receivedData->Clear();
	receivedInfo->Clear();

	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_instance_w_condition(received_data, info_seq, maxSamples, handle, condition->impl_entity);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle) {
	return  OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeInstance(receivedData, receivedInfo, handle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples) {
	return  OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeInstance(receivedData, receivedInfo, handle, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_instance_w_condition(received_data, info_seq, maxSamples, handle, condition->impl_entity);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle handle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_instance(received_data, info_seq, maxSamples, handle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadNextInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle previousHandle) {
	return  OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadNextInstance(receivedData, receivedInfo, previousHandle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadNextInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle previousHandle, System::Int32 maxSamples) {
	return  OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadNextInstance(receivedData, receivedInfo, previousHandle, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadNextInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle previousHandle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_next_instance_w_condition(received_data, info_seq, maxSamples, previousHandle, condition->impl_entity);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadNextInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle previousHandle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->read_next_instance(received_data, info_seq, maxSamples, previousHandle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeNextInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle previousHandle) {
	return  OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeNextInstance(receivedData, receivedInfo, previousHandle, ::DDS::LENGTH_UNLIMITED, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeNextInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle previousHandle, System::Int32 maxSamples) {
	return  OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeNextInstance(receivedData, receivedInfo, previousHandle, maxSamples, OpenDDSharp::DDS::SampleStateMask::AnySampleState, OpenDDSharp::DDS::ViewStateMask::AnyViewState, OpenDDSharp::DDS::InstanceStateMask::AnyInstanceState);
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeNextInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle previousHandle, System::Int32 maxSamples, OpenDDSharp::DDS::ReadCondition^ condition) {
	if (condition == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

	if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_next_instance_w_condition(received_data, info_seq, maxSamples, previousHandle, condition->impl_entity);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeNextInstance(List<ShapeType^>^ receivedData, List<::OpenDDSharp::DDS::SampleInfo^>^ receivedInfo, OpenDDSharp::DDS::InstanceHandle previousHandle, System::Int32 maxSamples, OpenDDSharp::DDS::SampleStateMask sampleStates, OpenDDSharp::DDS::ViewStateMask viewStates, OpenDDSharp::DDS::InstanceStateMask instanceStates) {
    if (receivedData == nullptr || receivedInfo == nullptr) {
		return OpenDDSharp::DDS::ReturnCode::BadParameter;
	}

    receivedData->Clear();
	receivedInfo->Clear();

	::org::omg::dds::demo::ShapeTypeSeq received_data;
	::DDS::SampleInfoSeq info_seq;
	::DDS::ReturnCode_t ret = impl_entity->take_next_instance(received_data, info_seq, maxSamples, previousHandle, sampleStates, viewStates, instanceStates);

	if (ret == ::DDS::RETCODE_OK) {
		for (unsigned int i = 0; i < received_data.length(); i++) {
			ShapeType^ data = gcnew ShapeType();
			::OpenDDSharp::DDS::SampleInfo^ sampleInfo = gcnew ::OpenDDSharp::DDS::SampleInfo();

			data->FromNative(received_data[i]);
			sampleInfo->FromNative(info_seq[i]);

			receivedData->Add(data);
			receivedInfo->Add(sampleInfo);
		}
	}

    impl_entity->return_loan(received_data, info_seq);

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::ReadNextSample(ShapeType^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo) {
    ::org::omg::dds::demo::ShapeType aux;
    ::DDS::SampleInfo sample_info;
	::DDS::ReturnCode_t ret = impl_entity->read_next_sample(aux, sample_info);

    if (ret == ::DDS::RETCODE_OK) {
	    data->FromNative(aux);
        sampleInfo->FromNative(sample_info);
    }

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::TakeNextSample(ShapeType^ data, ::OpenDDSharp::DDS::SampleInfo^ sampleInfo) {
    ::org::omg::dds::demo::ShapeType aux;
    ::DDS::SampleInfo sample_info;
	::DDS::ReturnCode_t ret = impl_entity->take_next_sample(aux, sample_info);

    if (ret == ::DDS::RETCODE_OK) {
	    data->FromNative(aux);
        sampleInfo->FromNative(sample_info);
    }

	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::ReturnCode OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::GetKeyValue(ShapeType^ data, OpenDDSharp::DDS::InstanceHandle handle) {
	::org::omg::dds::demo::ShapeType aux;
    ::DDS::ReturnCode_t ret = impl_entity->get_key_value(aux, handle);
    if (ret == ::DDS::RETCODE_OK) {
        data->FromNative(aux);
    }
	return (OpenDDSharp::DDS::ReturnCode)ret;
};

OpenDDSharp::DDS::InstanceHandle OpenDDSharp::org::omg::dds::demo::ShapeTypeDataReader::LookupInstance(ShapeType^ instance) {
	return impl_entity->lookup_instance(instance->ToNative());
};

///////////////////////////////////////////////////////////////////////
